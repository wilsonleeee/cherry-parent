<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="BINBEPLDPL06">
    
    <!-- 查询所有的员工信息 -->
    <select id="getEmployeeList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		<include refid="BINBECMINC99.pageheader" />		
		<![CDATA[
			SELECT						
				A.BIN_EmployeeID AS employeeId,	
				B.BIN_UserID AS userId,				
				C.Type AS type,
				D.BIN_PositionCategoryID AS positionCategoryId				
			FROM		 									
				Basis.BIN_Employee A WITH(NOLOCK)
				LEFT JOIN Privilege.BIN_User B WITH(NOLOCK) ON A.BIN_EmployeeID = B.BIN_EmployeeID
				LEFT JOIN Basis.BIN_Organization C WITH(NOLOCK) ON A.BIN_OrganizationID = C.BIN_OrganizationID	
				LEFT JOIN Privilege.BIN_PositionCategory D WITH(NOLOCK) ON A.BIN_PositionCategoryID = D.BIN_PositionCategoryID				
			WHERE 		
				A.BIN_OrganizationInfoID = #organizationInfoId# AND
				A.BIN_BrandInfoID = #brandInfoId# AND	
				(D.CategoryCode <> '01' OR D.CategoryCode IS NULL) AND			
				A.ValidFlag = '1'
		]]>
		<include refid="BINBECMINC99.pagefooter" />
    </select>
    
    <!-- 查询权限类型配置信息 -->
    <select id="getPrivilegeTypeList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		<![CDATA[
			SELECT	
				Category AS category,
				CASE Category WHEN 0 THEN DepartType WHEN 1 THEN CONVERT(VARCHAR,BIN_PositionCategoryID) ELSE NULL END AS categoryType,	
				BusinessType AS businessType,		
				PrivilegeType AS privilegeType,
				CASE WHEN Exclusive IS NULL THEN 0 ELSE Exclusive END AS exclusive 				
			FROM		 									
				Privilege.BIN_PrivilegeType	WITH(NOLOCK)			
			WHERE 					
				ValidFlag = '1'	
			ORDER BY
				category,
				categoryType
		]]>
    </select>
    
    <!-- 生成部门从属权限 -->
    <insert id="addDepartRelationPL" parameterClass="java.util.HashMap">
    	<![CDATA[
    		TRUNCATE TABLE Privilege.BIN_DepartRelation_temp
			INSERT INTO Privilege.BIN_DepartRelation_temp(
				[BIN_OrganizationID],
				[BIN_OrganizationIDRel],
			    [TestType],
			    [DepartType],
			    [PrivilegeFlag],
			    [ValidFlag],
			    [CreateTime]
			)
			SELECT
				T.organizationId,
				T.organizationIdRel,
				ISNULL(Y.testType,'0'),
				Y.type,
				'1',
				'1',
				GETDATE()
			FROM
				(SELECT
					A.BIN_OrganizationID AS organizationId,
					B.BIN_OrganizationID AS organizationIdRel
				FROM
					Basis.BIN_Organization A WITH(NOLOCK)
					JOIN Basis.BIN_Organization B WITH(NOLOCK) ON B.NodeID.IsDescendantOf(A.NodeID)= 1
				WHERE 
					A.Type <> 'Z'
				UNION	
				SELECT
					A.BIN_OrganizationID AS organizationId,
					D.BIN_OrganizationID AS organizationIdRel
				FROM
					Basis.BIN_Organization A WITH(NOLOCK)
					JOIN Basis.BIN_Organization B WITH(NOLOCK) ON B.NodeID.IsDescendantOf(A.NodeID)= 1	
					JOIN Basis.BIN_CounterInfo C WITH(NOLOCK) ON B.BIN_OrganizationID=C.ResellerDepartID
					JOIN Basis.BIN_Organization D WITH(NOLOCK) ON C.BIN_OrganizationID = D.BIN_OrganizationID
				WHERE
					A.Type IN ('3','7','8')) T
				
				JOIN Basis.BIN_Organization X WITH(NOLOCK) ON T.organizationId = X.BIN_OrganizationID
				JOIN Basis.BIN_Organization Y WITH(NOLOCK) ON T.organizationIdRel = Y.BIN_OrganizationID
			WHERE
				X.BIN_OrganizationInfoID = #organizationInfoId# AND
				X.BIN_BrandInfoID = #brandInfoId#
			ORDER BY 
				T.organizationId
		]]>
    </insert>
    
    <!-- 生成员工权限(包括管辖) -->
    <insert id="addEmployeePL0" parameterClass="java.util.HashMap">
    	<![CDATA[
			INSERT INTO [Privilege].[BIN_EmployeePrivilege_temp](
				[BIN_UserID],
				[BIN_EmployeeID],
				[BIN_SubEmployeeID],
				[BusinessType],
				[OperationType],
				[PrivilegeFlag],
				[ValidFlag],
				[CreateTime]
			)
			SELECT 
				L.BIN_UserID AS userId,
				M.employeeId AS employeeId,
				M.subEmployeeId AS subEmployeeId,
				#businessType# AS businessType,
				'1' AS operationType,
				M.privilegeFlag AS privilegeFlag,
				'1',
				GETDATE()
			FROM
				(SELECT					
					A.BIN_EmployeeID AS employeeId,
					B.BIN_EmployeeID AS subEmployeeId,					
					1 AS privilegeFlag					
				FROM						
					Basis.BIN_Employee A WITH(NOLOCK)
					JOIN Basis.BIN_Employee B WITH(NOLOCK) ON B.NodeID.IsDescendantOf(A.NodeID)=1			
				WHERE						
					A.BIN_EmployeeID = #employeeId#) M
					
				LEFT JOIN Privilege.BIN_User L WITH(NOLOCK) ON M.employeeId = L.BIN_EmployeeID
		]]>
    </insert>
    
    <!-- 生成员工权限(包括管辖和关注) -->
    <insert id="addEmployeePL1" parameterClass="java.util.HashMap">
    	<![CDATA[
			INSERT INTO [Privilege].[BIN_EmployeePrivilege_temp](
				[BIN_UserID],
				[BIN_EmployeeID],
				[BIN_SubEmployeeID],
				[BusinessType],
				[OperationType],
				[PrivilegeFlag],
				[ValidFlag],
				[CreateTime]
			)
			SELECT 
				L.BIN_UserID AS userId,
				M.employeeId AS employeeId,
				M.subEmployeeId AS subEmployeeId,
				#businessType# AS businessType,
				'1' AS operationType,
				M.privilegeFlag AS privilegeFlag,
				'1',
				GETDATE()
			FROM
				(SELECT
					T.employeeId,
					T.subEmployeeId,
					MAX(T.privilegeFlag) AS privilegeFlag
				FROM
				(
					(SELECT					
						A.BIN_EmployeeID AS employeeId,
						B.BIN_EmployeeID AS subEmployeeId,					
						1 AS privilegeFlag					
					FROM						
						Basis.BIN_Employee A WITH(NOLOCK)
						JOIN Basis.BIN_Employee B WITH(NOLOCK) ON B.NodeID.IsDescendantOf(A.NodeID)=1			
					WHERE						
						A.BIN_EmployeeID = #employeeId#)
					
					UNION	
					(SELECT
						A.BIN_EmployeeID AS employeeId,				
						E.BIN_EmployeeID AS subEmployeeId,
						0 AS privilegeFlag					
					FROM						
						Basis.BIN_Employee A WITH(NOLOCK)		
						JOIN Privilege.BIN_LikeEmployee B WITH(NOLOCK) ON A.BIN_EmployeeID = B.BIN_EmployeeID
						JOIN Basis.BIN_Employee D WITH(NOLOCK) ON B.BIN_LikeEmployeeID = D.BIN_EmployeeID
						JOIN Basis.BIN_Employee E WITH(NOLOCK) ON E.NodeID.IsDescendantOf(D.NodeID)=1
					WHERE						
						A.BIN_EmployeeID = #employeeId#)			
				) T
				GROUP BY
					T.employeeId,
					T.subEmployeeId) M
				
				LEFT JOIN Privilege.BIN_User L WITH(NOLOCK) ON M.employeeId = L.BIN_EmployeeID
		]]>
    </insert>
    
    <!-- 生成员工权限(包括管辖和直接关注) -->
    <insert id="addEmployeePL2" parameterClass="java.util.HashMap">
    	<![CDATA[
			INSERT INTO [Privilege].[BIN_EmployeePrivilege_temp](
				[BIN_UserID],
				[BIN_EmployeeID],
				[BIN_SubEmployeeID],
				[BusinessType],
				[OperationType],
				[PrivilegeFlag],
				[ValidFlag],
				[CreateTime]
			)
			SELECT 
				L.BIN_UserID AS userId,
				M.employeeId AS employeeId,
				M.subEmployeeId AS subEmployeeId,
				#businessType# AS businessType,
				'1' AS operationType,
				M.privilegeFlag AS privilegeFlag,
				'1',
				GETDATE()
			FROM
				(SELECT
					T.employeeId,
					T.subEmployeeId,
					MAX(T.privilegeFlag) AS privilegeFlag
				FROM
				(
					(SELECT					
						A.BIN_EmployeeID AS employeeId,
						B.BIN_EmployeeID AS subEmployeeId,					
						1 AS privilegeFlag					
					FROM						
						Basis.BIN_Employee A WITH(NOLOCK)
						JOIN Basis.BIN_Employee B WITH(NOLOCK) ON B.NodeID.IsDescendantOf(A.NodeID)=1			
					WHERE						
						A.BIN_EmployeeID = #employeeId#)
						
					UNION
					(SELECT				
						A.BIN_EmployeeID AS employeeId,
						B.BIN_LikeEmployeeID AS subEmployeeId,					
						0 AS privilegeFlag				
					FROM	
						Basis.BIN_Employee A WITH(NOLOCK)				
						JOIN Privilege.BIN_LikeEmployee B WITH(NOLOCK) ON A.BIN_EmployeeID = B.BIN_EmployeeID			
					WHERE						
						A.BIN_EmployeeID = #employeeId#)
				) T
				GROUP BY
					T.employeeId,
					T.subEmployeeId) M
				
				LEFT JOIN Privilege.BIN_User L WITH(NOLOCK) ON M.employeeId = L.BIN_EmployeeID
		]]>
    </insert>
    
    <!-- 生成部门权限(包括管辖) -->
    <insert id="addDepartPL0" parameterClass="java.util.HashMap">
    	<![CDATA[
			INSERT INTO [Privilege].[BIN_DepartPrivilege_temp](
				[BIN_UserID],
				[BIN_EmployeeID],
				[BIN_OrganizationID],
				[BusinessType],
				[OperationType],
				[DepartType],
				[CounterKind],
				[PrivilegeFlag],
				[OrgValidFlag],
				[ValidFlag],
				[CreateTime]
			)
			SELECT
				L.BIN_UserID AS userId,
				M.employeeId AS employeeId,
				M.organizationId AS organizationId,
				#businessType# AS businessType,
				'1' AS operationType,
				N.Type AS type,
				N.TestType AS testType,
				M.privilegeFlag AS privilegeFlag,
				N.ValidFlag AS validFlag,
				'1',
				GETDATE()
			FROM
				(SELECT 
					A.BIN_EmployeeID AS employeeId,
					C.BIN_OrganizationIDRel AS organizationId,
					'1' AS privilegeFlag
				FROM
					Privilege.BIN_EmployeePrivilege A WITH(NOLOCK)
					JOIN Privilege.BIN_EmployeeDepart B WITH(NOLOCK) ON A.BIN_SubEmployeeID=B.BIN_EmployeeID AND B.ManageType='1'
					JOIN Privilege.BIN_DepartRelation C WITH(NOLOCK) ON B.BIN_OrganizationID=C.BIN_OrganizationID
				WHERE
					A.BIN_EmployeeID = #employeeId#	AND
					A.BusinessType = #businessType# AND
					A.PrivilegeFlag='1') M
				
				LEFT JOIN Privilege.BIN_User L WITH(NOLOCK) ON M.employeeId = L.BIN_EmployeeID
				JOIN Basis.BIN_Organization N WITH(NOLOCK) ON M.organizationId = N.BIN_OrganizationID

		]]>
    </insert>
    
    <!-- 生成部门权限(包括管辖和关注) -->
    <insert id="addDepartPL1" parameterClass="java.util.HashMap">
    	<![CDATA[
			INSERT INTO [Privilege].[BIN_DepartPrivilege_temp](
				[BIN_UserID],
				[BIN_EmployeeID],
				[BIN_OrganizationID],
				[BusinessType],
				[OperationType],
				[DepartType],
				[CounterKind],
				[PrivilegeFlag],
				[OrgValidFlag],
				[ValidFlag],
				[CreateTime]
			)
			SELECT
				L.BIN_UserID AS userId,
				M.employeeId AS employeeId,
				M.organizationId AS organizationId,
				#businessType# AS businessType,
				'1' AS operationType,
				N.Type AS type,
				N.TestType AS testType,
				M.privilegeFlag AS privilegeFlag,
				N.ValidFlag AS validFlag,
				'1',
				GETDATE()
			FROM
				(SELECT 
					T.employeeId,
					T.organizationId,
					MAX(T.privilegeFlag) AS privilegeFlag
				FROM
			
					(SELECT 
						A.BIN_EmployeeID AS employeeId,
						C.BIN_OrganizationIDRel AS organizationId,
						CASE WHEN A.PrivilegeFlag='1' THEN '1' ELSE '0' END AS privilegeFlag
					FROM
						Privilege.BIN_EmployeePrivilege A WITH(NOLOCK)
						JOIN Privilege.BIN_EmployeeDepart B WITH(NOLOCK) ON A.BIN_SubEmployeeID=B.BIN_EmployeeID AND B.ManageType='1'
						JOIN Privilege.BIN_DepartRelation C WITH(NOLOCK) ON B.BIN_OrganizationID=C.BIN_OrganizationID
					WHERE
						A.BIN_EmployeeID = #employeeId#	AND
						A.BusinessType = #businessType#
						
					UNION
					SELECT
						A.BIN_EmployeeID AS employeeId,
						D.BIN_OrganizationIDRel AS organizationId,
						'0' as privilegeFlag
					FROM
						Basis.BIN_Employee A WITH(NOLOCK)
						JOIN Privilege.BIN_EmployeeDepart B WITH(NOLOCK) ON A.BIN_EmployeeID=B.BIN_EmployeeID AND B.ManageType='0'
						JOIN Privilege.BIN_DepartRelation D WITH(NOLOCK) ON B.BIN_OrganizationID=D.BIN_OrganizationID
					WHERE
						A.BIN_EmployeeID = #employeeId#
			
					UNION
					SELECT 
						A.BIN_EmployeeID AS employeeId,
						A.BIN_OrganizationID AS organizationId,
						'0' as privilegeFlag
					FROM
						Basis.BIN_Employee A WITH(NOLOCK)
					WHERE
						A.BIN_EmployeeID = #employeeId# AND
						A.BIN_OrganizationID IS NOT NULL AND
						A.BIN_OrganizationID <> '') T
			
				GROUP BY
					T.employeeId,
					T.organizationId) M
				
				LEFT JOIN Privilege.BIN_User L WITH(NOLOCK) ON M.employeeId = L.BIN_EmployeeID
				JOIN Basis.BIN_Organization N WITH(NOLOCK) ON M.organizationId = N.BIN_OrganizationID
				
		]]>
    </insert>
    
    <!-- 生成部门权限(包括管辖和直接关注) -->
    <insert id="addDepartPL2" parameterClass="java.util.HashMap">
    	<![CDATA[
			INSERT INTO [Privilege].[BIN_DepartPrivilege_temp](
				[BIN_UserID],
				[BIN_EmployeeID],
				[BIN_OrganizationID],
				[BusinessType],
				[OperationType],
				[DepartType],
				[CounterKind],
				[PrivilegeFlag],
				[OrgValidFlag],
				[ValidFlag],
				[CreateTime]
			)
			SELECT
				L.BIN_UserID AS userId,
				M.employeeId AS employeeId,
				M.organizationId AS organizationId,
				#businessType# AS businessType,
				'1' AS operationType,
				N.Type AS type,
				N.TestType AS testType,
				M.privilegeFlag AS privilegeFlag,
				N.ValidFlag AS validFlag,
				'1',
				GETDATE()
			FROM
				(SELECT 
					T.employeeId,
					T.organizationId,
					MAX(T.privilegeFlag) AS privilegeFlag
				FROM
			
					(SELECT 
						A.BIN_EmployeeID AS employeeId,
						C.BIN_OrganizationIDRel AS organizationId,
						CASE WHEN A.PrivilegeFlag='1' THEN '1' ELSE '0' END AS privilegeFlag
					FROM
						Privilege.BIN_EmployeePrivilege A WITH(NOLOCK)
						JOIN Privilege.BIN_EmployeeDepart B WITH(NOLOCK) ON A.BIN_SubEmployeeID=B.BIN_EmployeeID AND B.ManageType='1'
						JOIN Privilege.BIN_DepartRelation C WITH(NOLOCK) ON B.BIN_OrganizationID=C.BIN_OrganizationID
					WHERE
						A.BIN_EmployeeID = #employeeId#	AND
						A.BusinessType = #businessType#
						
					UNION
					SELECT 
						A.BIN_EmployeeID AS employeeId,
						B.BIN_OrganizationID AS organizationId,
						'0' AS privilegeFlag
					FROM
						Basis.BIN_Employee A WITH(NOLOCK)
						JOIN Privilege.BIN_EmployeeDepart B WITH(NOLOCK) ON A.BIN_EmployeeID=B.BIN_EmployeeID AND B.ManageType='0'
					WHERE
						A.BIN_EmployeeID = #employeeId#
			
					UNION
					SELECT 
						A.BIN_EmployeeID AS employeeId,
						A.BIN_OrganizationID AS organizationId,
						'0' as privilegeFlag
					FROM
						Basis.BIN_Employee A WITH(NOLOCK)
					WHERE
						A.BIN_EmployeeID = #employeeId# AND
						A.BIN_OrganizationID IS NOT NULL AND
						A.BIN_OrganizationID <> '') T
			
				GROUP BY
					T.employeeId,
					T.organizationId) M
				
				LEFT JOIN Privilege.BIN_User L WITH(NOLOCK) ON M.employeeId = L.BIN_EmployeeID
				JOIN Basis.BIN_Organization N WITH(NOLOCK) ON M.organizationId = N.BIN_OrganizationID	

		]]>
    </insert>
    
    <!-- 生成部门权限(包括管辖和关注（所属部门除外）) -->
    <insert id="addDepartPL3" parameterClass="java.util.HashMap">
    	<![CDATA[
			INSERT INTO [Privilege].[BIN_DepartPrivilege_temp](
				[BIN_UserID],
				[BIN_EmployeeID],
				[BIN_OrganizationID],
				[BusinessType],
				[OperationType],
				[DepartType],
				[CounterKind],
				[PrivilegeFlag],
				[OrgValidFlag],
				[ValidFlag],
				[CreateTime]
			)
			SELECT
				L.BIN_UserID AS userId,
				M.employeeId AS employeeId,
				M.organizationId AS organizationId,
				#businessType# AS businessType,
				'1' AS operationType,
				N.Type AS type,
				N.TestType AS testType,
				M.privilegeFlag AS privilegeFlag,
				N.ValidFlag AS validFlag,
				'1',
				GETDATE()
			FROM
				(SELECT 
					T.employeeId,
					T.organizationId,
					MAX(T.privilegeFlag) AS privilegeFlag
				FROM
			
					(SELECT 
						A.BIN_EmployeeID AS employeeId,
						C.BIN_OrganizationIDRel AS organizationId,
						CASE WHEN A.PrivilegeFlag='1' THEN '1' ELSE '0' END AS privilegeFlag
					FROM
						Privilege.BIN_EmployeePrivilege A WITH(NOLOCK)
						JOIN Privilege.BIN_EmployeeDepart B WITH(NOLOCK) ON A.BIN_SubEmployeeID=B.BIN_EmployeeID AND B.ManageType='1'
						JOIN Privilege.BIN_DepartRelation C WITH(NOLOCK) ON B.BIN_OrganizationID=C.BIN_OrganizationID
					WHERE
						A.BIN_EmployeeID = #employeeId#	AND
						A.BusinessType = #businessType#
			
					UNION
					SELECT
						A.BIN_EmployeeID AS employeeId,
						D.BIN_OrganizationIDRel AS organizationId,
						'0' as privilegeFlag
					FROM
						Basis.BIN_Employee A WITH(NOLOCK)
						JOIN Privilege.BIN_EmployeeDepart B WITH(NOLOCK) ON A.BIN_EmployeeID=B.BIN_EmployeeID AND B.ManageType='0'
						JOIN Privilege.BIN_DepartRelation D WITH(NOLOCK) ON B.BIN_OrganizationID=D.BIN_OrganizationID
					WHERE
						A.BIN_EmployeeID = #employeeId#) T
			
				GROUP BY
					T.employeeId,
					T.organizationId) M
				
				LEFT JOIN Privilege.BIN_User L WITH(NOLOCK) ON M.employeeId = L.BIN_EmployeeID
				JOIN Basis.BIN_Organization N WITH(NOLOCK) ON M.organizationId = N.BIN_OrganizationID

		]]>
    </insert>
    
    <!-- 部门权限从临时表复制到真实表 -->
    <update id="copyDataPrivilege" parameterClass="java.util.HashMap" timeout="300">
		<![CDATA[
			TRUNCATE TABLE Privilege.BIN_DepartPrivilege
			INSERT INTO Privilege.BIN_DepartPrivilege WITH(TABLOCK)
			(
				BIN_UserID,
			    BIN_EmployeeID,
			    BIN_OrganizationID,
			    DepartType,
			    BusinessType,
			    OperationType,
			    CounterKind,
			    PrivilegeFlag,
			    OrgValidFlag,
			    ValidFlag,
			    CreateTime
			)
			SELECT 
				BIN_UserID,
			    BIN_EmployeeID,
			    BIN_OrganizationID,
			    DepartType,
			    BusinessType,
			    OperationType,
			    CounterKind,
			    PrivilegeFlag,
			    OrgValidFlag,
			    ValidFlag,
			    CreateTime
			FROM 
				Privilege.BIN_DepartPrivilege_temp WITH(NOLOCK)
		]]>	
    </update>
    
    <!-- 部门从属权限从临时表复制到真实表 -->
    <update id="copyDepartRelation" parameterClass="java.util.HashMap" timeout="300">
		<![CDATA[
			TRUNCATE TABLE Privilege.BIN_DepartRelation
			INSERT INTO Privilege.BIN_DepartRelation WITH(TABLOCK)
			(
				BIN_OrganizationID,
			    BIN_OrganizationIDRel,
			    TestType,
			    DepartType,
			    PrivilegeFlag,
			    ValidFlag,
			    CreateTime
			)
			SELECT 
				BIN_OrganizationID,
			    BIN_OrganizationIDRel,
			    TestType,
			    DepartType,
			    PrivilegeFlag,
			    ValidFlag,
			    CreateTime
			FROM 
				Privilege.BIN_DepartRelation_temp WITH(NOLOCK)
		]]>	
    </update>
    
    <!-- 人员权限从临时表复制到真实表 -->
    <update id="copyEmployeePrivilege" parameterClass="java.util.HashMap" timeout="300">
		<![CDATA[
			TRUNCATE TABLE Privilege.BIN_EmployeePrivilege
			INSERT INTO Privilege.BIN_EmployeePrivilege WITH(TABLOCK)
			(
				BIN_UserID,
		        BIN_EmployeeID,
		        BIN_SubEmployeeID,
		        BusinessType,
		        OperationType,
		        PrivilegeFlag,
		        ValidFlag,
		        CreateTime
			)
			SELECT 
				BIN_UserID,
		        BIN_EmployeeID,
		        BIN_SubEmployeeID,
		        BusinessType,
		        OperationType,
		        PrivilegeFlag,
		        ValidFlag,
		        CreateTime
			FROM 
				Privilege.BIN_EmployeePrivilege_temp WITH(NOLOCK)
		]]>	
    </update>
    
    <!-- 清空部门权限临时表数据 -->
    <update id="truncateDepartPrivilegeTemp" parameterClass="java.util.HashMap">
		<![CDATA[
			TRUNCATE TABLE Privilege.BIN_DepartPrivilege_temp
		]]>	
    </update>
    
    <!-- 清空人员权限临时表数据 -->
    <update id="truncateEmployeePrivilegeTemp" parameterClass="java.util.HashMap">
		<![CDATA[
			TRUNCATE TABLE Privilege.BIN_EmployeePrivilege_temp
		]]>	
    </update>
    
</sqlMap>
