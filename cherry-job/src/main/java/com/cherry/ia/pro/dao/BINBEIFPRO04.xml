<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="BINBEIFPRO04">
	<!-- 更新销售日期或价格生效日期在业务日期前后1天内的产品的版本号 -->
	<update id="updPrtVerByPrtSellDatePriceSaleDate" parameterClass="java.util.HashMap">
		UPDATE A
		SET A.Version = #tVersion#+1
		FROM Basis.BIN_Product A	
		WHERE
		A.BIN_BrandInfoID = #brandInfoId#
		AND
		(
			<!-- 价格生效日期在业务日期前后1天内的产品 -->
			EXISTS(
				SELECT 1 
				FROM Basis.BIN_ProductPrice 
				WHERE 
					Type = '2'
				AND (   StartDate = DATEADD(day,1,#priceDate#) 
					OR  StartDate = DATEADD(day,0,#priceDate#) 
					OR  StartDate = DATEADD(day,-1,#priceDate#) 
					OR  EndDate = DATEADD(day,1,#priceDate#) 	
					OR  EndDate = DATEADD(day,0,#priceDate#) 
					OR  EndDate = DATEADD(day,-1,#priceDate#)
				)
				AND A.BIN_ProductID = BIN_ProductID
			)
			<!-- 销售日期在业务日期前后1天内的产品 -->
			OR (    SellStartDate = DATEADD(day,1,#priceDate#) 
				OR  SellStartDate = DATEADD(day,0,#priceDate#) 
				OR  SellStartDate = DATEADD(day,-1,#priceDate#) 
				OR  SellEndDate = DATEADD(day,1,#priceDate#) 	
				OR  SellEndDate = DATEADD(day,0,#priceDate#) 
				OR  SellEndDate = DATEADD(day,-1,#priceDate#)
			)
		)
    </update>


	<!--更新价格生效日期在业务日期前后1天内的产品的版本号 -->
	<update id="updVerByPriceSaleDate" parameterClass="java.util.HashMap">
	<![CDATA[
		UPDATE A
		SET A.Version = #tVersion#+1
		FROM Basis.BIN_Product A	
		JOIN Basis.BIN_ProductPrice D 
		ON (D.BIN_ProductID = A.BIN_ProductID 
			AND D.Type = '2' 
			AND 
			(   
				D.StartDate = DATEADD(day,1,#priceDate#) 
			OR  D.StartDate = DATEADD(day,0,#priceDate#) 
			OR  D.StartDate = DATEADD(day,-1,#priceDate#) 
			OR  D.EndDate = DATEADD(day,1,#priceDate#) 	
			OR  D.EndDate = DATEADD(day,0,#priceDate#) 
			OR  D.EndDate = DATEADD(day,-1,#priceDate#)
			)
		) 
	]]>
    </update>
    
	<resultMap id="BINBEIFPRO04.proMap" class="java.util.HashMap">
		<result property="brandCode" column="BrandCode"/>
		<result property="unitCode" column="UnitCode"/>
		<result property="barCode" column="BarCode"/>
		<result property="prtVendorId" column="BIN_ProductVendorID"/>
		<result property="nameTotal" column="NameTotal"/>
		<result property="price" column="SalePrice"/>
		<result property="discount" column="MemPrice"/>
		<result property="PlatinumPrice" column="PlatinumPrice"/>
		<result property="mode" column="Mode"/>
		<result property="IsBOM" column="IsBOM"/>
		<result property="status" column="Status"/>
		<result property="cost" column="StandardCost"/>
		<result property="maxPrice" column="maxPrice"/>
		<result property="minPrice" column="minPrice"/>
		<result property="pxEnable" column="pxEnable"/>
		<result property="useDay" column="RecommendedNumDay"/>
		<result property="productId" column="BIN_ProductID"/>
		<result property="IsStock" column="IsStock"/>
		<result property="Version" column="Version"/>
		<result property="ValidFlag" column="ValidFlag"/>
		<result property="SellDateFlag" column="SellDateFlag"/><!-- 0:未过期 1:已过期 -->
		<result property="list" column="BIN_ProductID" select="BINBEIFPRO04.getCateList" javaType="java.util.List"/>
		<result property="BOMList" column="BIN_ProductVendorID" select="BINBEIFPRO04.getProductBOMList" javaType="java.util.List"/>
		<result property="Spec" column="Spec"/>
		<result property="ModuleCode" column="ModuleCode"/>
		<result property="GoodsType" column="GoodsType"/>
		<result property="FGoodsMode" column="FGoodsMode"/>
		<result property="Series" column="Series"/>
		<result property="BigCate" column="BigCate"/>
		<result property="ItemType" column="ItemType"/>
		<result property="OriginalBrand" column="OriginalBrand"/>
	</resultMap>
	<!-- 查询新后台产品数据list -->
	<select id="getProductList" parameterClass="java.util.HashMap" resultMap="BINBEIFPRO04.proMap">
		<include refid="BINBECMINC99.pageheader" />
		<![CDATA[
		SELECT
		    DISTINCT
			A.BIN_ProductID,
			C.BrandCode,
			A.UnitCode,	
			B.BarCode,
			B.BIN_ProductVendorID,
			A.NameTotal,
			ISNULL(D.SalePrice,0) AS SalePrice,
			ISNULL(D.MemPrice,0) AS MemPrice,
			ISNULL(D.PlatinumPrice,0) AS PlatinumPrice,
			A.Mode,
			CASE WHEN ISNULL(A.Mode,'') = 'BOM' THEN '1' ELSE '0' END AS IsBOM,	
			ISNULL(A.Status,'E') AS Status,
			ISNULL(A.StandardCost,0) AS StandardCost,
			ISNULL(A.MaxSalePrice,ISNULL(D.SalePrice,0)) AS maxPrice,
			ISNULL(A.MinSalePrice,0) AS minPrice,
			ISNULL(A.IsExchanged,'0') AS pxEnable,
			A.RecommendedNumDay,
			A.IsStock,
			A.Version,
			B.ValidFlag,
			CASE 
				WHEN (A.SellStartDate IS NOT NULL AND A.SellEndDate IS NULL AND #priceDate# >= A.SellStartDate) 
				  OR (A.SellEndDate IS NOT NULL AND A.SellStartDate IS NULL AND #priceDate# <= A.SellEndDate)
			      OR (A.SellStartDate IS NOT NULL AND A.SellEndDate IS NOT NULL AND A.SellStartDate <= #priceDate# AND #priceDate# <= A.SellEndDate) 
			      OR (A.SellStartDate IS NULL AND A.SellEndDate IS NULL)
			    THEN '0' ELSE '1' END AS SellDateFlag,
		    Spec,
		    ModuleCode,
		    A.GoodsType,
		    A.FGoodsMode,
		    A.Series,
		    A.BigCate,
		    A.ItemType,
		    A.OriginalBrand
		FROM
			Basis.BIN_Product A	WITH(NOLOCK)
			JOIN Basis.BIN_ProductVendor B WITH(NOLOCK) ON(A.BIN_ProductID = B.BIN_ProductID)
			JOIN Basis.BIN_BrandInfo C WITH(NOLOCK) ON(A.BIN_BrandInfoID = C.BIN_BrandInfoID AND C.ValidFlag = '1')
			LEFT JOIN(
				SELECT 
					T20.BIN_ProductID,					
					T20.SalePrice,
					T20.MemPrice,
					T20.PlatinumPrice
				FROM
					(
						SELECT
							BIN_ProductID,
							MAX(StartDate) AS startDate
						FROM
							Basis.BIN_ProductPrice WITH(NOLOCK)
						WHERE
							StartDate <= #priceDate#
						AND Type = '2'
						GROUP BY
							BIN_ProductID
					) T10
					JOIN Basis.BIN_ProductPrice T20 WITH(NOLOCK)
					ON(T10.BIN_ProductID = T20.BIN_ProductID
						AND T10.startDate = T20.StartDate 
						AND T20.Type = '2'
					)
			)D ON(A.BIN_ProductID = D.BIN_ProductID)
		WHERE		
			A.BIN_BrandInfoID = #brandInfoId#
		AND	A.Version > #tVersion#
		AND A.ValidFlag <> 2
		]]>
		<include refid="BINBECMINC99.pagefooter" />		
    </select>

	<!--查询产品分类(下发)信息list -->
	<select id="getCateList" parameterClass="java.lang.Integer" resultClass="java.util.HashMap">
		<![CDATA[
		SELECT
			C.TeminalFlag AS cateType,
			B.PropValue AS cateCode,
			B.PropValueChinese AS cateName
		FROM
			Basis.BIN_PrtCategory A
			JOIN Basis.BIN_PrtCatPropValue B
			ON(A.BIN_PrtCatPropValueID = B.BIN_PrtCatPropValueID
				AND B.ValidFlag = '1')	
			JOIN Basis.BIN_PrtCatProperty C	
			ON(B.BIN_PrtCatPropertyID = C.BIN_PrtCatPropertyID
				AND C.TeminalFlag > 0
				AND C.ValidFlag = '1')
		WHERE
		 	A.BIN_ProductID = #productId#
		]]>
    </select>
    
    <!--查询BOM产品的BOMList(下发)信息 -->
	<select id="getProductBOMList" parameterClass="java.lang.Integer" resultClass="java.util.HashMap">
		<![CDATA[
			SELECT 
				BOM_BIN_ProductVendorID AS ProductId
				,SUB_BIN_ProductVendorID AS BomProductId
				,SUB_ProdouctType AS BomProductType
				,Quantity AS quantity
				,Price AS price
				,BOMDescription AS comment
			FROM 
				Basis.BIN_ProductBOM WITH(NOLOCK)
			WHERE
			 	BOM_BIN_ProductVendorID = #prtVendorId#
		]]>
    </select>
    
	<!--停用ProductSCS表的变更后老的编码条码 -->
	<update id="disProductSCS" parameterClass="java.util.HashMap">
	<![CDATA[
				UPDATE
					dbo.Product_SCS
				SET 
					status = 'D',
					version = #tVersion#+1
				WHERE 
					brand = #brandCode#
				AND ProductId = #prtVendorId#
				AND unitcode = #OldUnitCode#
				AND barcode = #OldBarCode#
	]]>
    </update>
    
	<!-- 更新ProductSCS  -->
	<select id="mergeProductSCS" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<![CDATA[	
		IF OBJECT_ID('dbo.Product_SCS') IS NOT NULL
		MERGE  dbo.Product_SCS AS TGT
		    USING (select #brandCode# as brand,#prtVendorId# as ProductId,
						  #unitCode# as unitCode, #barCode# as barCode
		    ) AS SRC
		     ON (
		        TGT.brand = SRC.brand
		        AND TGT.ProductId = SRC.ProductId
		        AND TGT.unitcode = SRC.unitCode
		        AND TGT.barcode = SRC.barCode
		        )
		        
		WHEN MATCHED THEN	
		    UPDATE SET 
				chinesename = #nameTotal#,
				lclassCode = #lCode#,
				lclassname = #lName#,
				mclasscode = #mCode#,
				mclassname = #mName#,
				bclasscode = #bCode#,
				bclassname = #bName#,
				itemtype = #ItemType#,
				itemtypename = #ItemTypeName#,
				price = #price#,
				discount_price = #discount#,
				PlatinumPrice = #PlatinumPrice#,
				status = #prtscs_status#,
				Mode = #mode#,
				cost = #cost#,
				maxprice = #maxPrice#,
				minprice = #minPrice#,
				pxEnable = #pxEnable#,
				useup_period = #useDay#,
				IsStock = #IsStock#,
				version = #Version#,
				Spec = #Spec#,
				Module = #ModuleCode#,
				modified = GETDATE(),
				IsBOM = #IsBOM#,
				SubBrandCode = #OriginalBrand#
		WHEN NOT MATCHED THEN 
			INSERT(	
				brand,
				barcode,
				unitcode,
				chinesename,
				lclassCode,
				lclassname,
				mclasscode,
				mclassname,
				bclasscode,
				bclassname,
				itemtype,
				itemtypename,
				price,
				discount_price,
				PlatinumPrice,
				status,
				Mode,
				cost,
				maxprice,
				minprice,
				pxEnable,
				useup_period,
				IsStock,
				version,
				ProductId,
				Spec,
				Module,
				created,
				modified,
				IsBOM,
				SubBrandCode
			)VALUES(
				#brandCode#,
				#barCode#,
				#unitCode#,
				#nameTotal#,
				#lCode#,
				#lName#,
				#mCode#,
				#mName#,
				#bCode#,
				#bName#,
				#ItemType#,
				#ItemTypeName#,
				#price#,
				#discount#,
				#PlatinumPrice#,
				#prtscs_status#,
				#mode#,
				#cost#,
				#maxPrice#,
				#minPrice#,
				#pxEnable#,
				#useDay#,
				#IsStock#,
				#Version#,
				#prtVendorId#,
				#Spec#,
				#ModuleCode#,
				GETDATE(),
				GETDATE(),
				#IsBOM#,
				#OriginalBrand#
			)
		OUTPUT $$action AS actionResult,inserted.brand AS brand,inserted.ProductId AS ProductId,inserted.unitcode AS unitcode ,inserted.barcode  AS barcode;
	]]>
	</select>

	<!-- 插入ProductSetting -->
	<insert id="addProductSetting" parameterClass="java.util.HashMap">
		<![CDATA[
			INSERT INTO dbo.WITPOSA_ProductSetting(	
				brand,
				new_barcode,
		        new_unitcode,
		        old_barcode,
		        old_unitcode,
		        prt_id,
		        prt_type,
		        enable_time,
		        is_handle,
		        created,
		        modified
			)VALUES(
			   	#brand#,
				#new_barcode#,
		        #new_unitcode#,
		        #old_barcode#,
		        #old_unitcode#,
		        #prt_id#,
		        #prt_type#,
		        #enable_time#,
		        ISNULL(#is_handle#,0),
		        GETDATE(),
		        GETDATE()
			)
		]]>				
    </insert>
	<!-- 插入产品条码对应关系表  -->
	<insert id="insertPrtBarCode" parameterClass="java.util.HashMap">
        <![CDATA[ 
		INSERT INTO Basis.BIN_PrtBarCode							
           (BIN_ProductVendorID,					
            OldUnitCode,					
            OldBarCode,					
            StartTime,
			UpdateFlag,
		]]>
			<include refid="BINBECMINC99.insertKeySql" />		
		<![CDATA[
        )VALUES	(
			#prtVendorId#,
			#unitCode#,					
            #barCode#,					
            #startTime#,
			'1',
		]]>
			<include refid="BINBECMINC99.insertValueSql" />		
		<![CDATA[)]]>
    </insert>
	<!--更新停用日时 -->
	<update id="updateClosingTime" parameterClass="java.util.HashMap">
		<![CDATA[
			UPDATE 		
				Basis.BIN_PrtBarCode	
			SET		
				ClosingTime = #closingTime#,
				UpdateFlag = '0',
				ValidFlag = '1',
		]]>
			<include refid="BINBECMINC99.updateSql" />	
		<![CDATA[				
			WHERE					
				BIN_ProductVendorID = #prtVendorId# AND
				ClosingTime IS NULL
		]]>
    </update>
	<!-- 查询对应关系件数  -->
    <select id="getBarCodeCount" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
       <![CDATA[
			SELECT
				COUNT(BIN_PrtBarCodeID)
			FROM
				Basis.BIN_PrtBarCode WITH(NOLOCK)
			WHERE
				BIN_ProductVendorID = #prtVendorId# AND
				OldUnitCode = #unitCode# AND
				OldBarCode = #barCode# AND
				ClosingTime IS NULL
		]]>	
    </select>
    <!-- 取得品牌Code  -->
    <select id="getBrandCode" parameterClass="java.util.HashMap" resultClass="java.lang.String">
       <![CDATA[
			SELECT
				BrandCode AS brandCode
			FROM
				Basis.BIN_BrandInfo
			WHERE
				BIN_BrandInfoID = #brandInfoId#
		]]>	
    </select>
	<!-- 查询编码条码变更数据  -->
    <select id="getBarCodeModify" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
       <![CDATA[
			SELECT
				BIN_ProductVendorID,
				OldUnitCode,
				OldBarCode,
				UnitCode,
				BarCode
			FROM
				Basis.BIN_PrtBarCode WITH(NOLOCK)
			WHERE
				BIN_ProductVendorID = #prtVendorId# AND
				UnitCode = #unitCode# AND
				BarCode = #barCode# AND
				ClosingTime IS NULL
		]]>	
    </select>
    
	<!-- 根据CodeKey查询CODE  -->
    <select id="getCodeByKey" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
       <![CDATA[
			SELECT 
				OrgCode,
				BrandCode,
				CodeType,
				CodeKey,
				Value1,
				Value2,
				Value3
			FROM
				Tools.BIN_Coder WITH(NOLOCK)
			WHERE
				CodeType = #codeType#
			AND CodeKey = #codeKey#
			AND ValidFlag = '1'
		]]>	
    </select>
    
    <!-- 根据指定Version取产品功能开启时间的产品信息List -->
	<select id="getPrtFunDetailByVersionList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			PF.PrtFunDateCode,
			PV.BIN_ProductVendorID,
			PV.BarCode,
			P.UnitCode,
			PFD.Version,
			CASE WHEN (PF.ValidFlag ='0') THEN '0' ELSE PFD.ValidFlag END AS ValidFlag,
			convert(varchar(30),PF.StartDate,120) AS StartDate,
			convert(varchar(30),PF.EndDate,120) AS EndDate
		FROM
			Basis.BIN_ProductFunctionDetail PFD WITH(NOLOCK)
		JOIN Basis.BIN_ProductFunction PF WITH(NOLOCK) ON PFD.BIN_ProductFunctionID = PF.BIN_ProductFunctionID
		JOIN Basis.BIN_Product P WITH(NOLOCK) ON PFD.BIN_ProductID = P.BIN_ProductID
		JOIN Basis.BIN_ProductVendor PV WITH(NOLOCK) ON PV.BIN_ProductID = P.BIN_ProductID
		WHERE
			PF.BIN_OrganizationInfoID = #organizationInfoId#
		AND PF.BIN_BrandInfoID = #brandInfoId#
		AND	PFD.Version > #tVersion# 
	</select>
    
    <!-- 删除产品功能开启接口表(根据brandArr、PrtFunDateCode、产品厂商ID) -->
    <delete id="delIFPrtFunEnable" parameterClass="java.util.HashMap">
    	<![CDATA[
    		DELETE FROM 
    			dbo.WITPOSA_ProductFuctionEnable
    		WHERE
    			brandAbbr = #brandCode#
    		AND PrtFunDateCode = #PrtFunDateCode#
    		AND prt_id = #BIN_ProductVendorID#
		]]>	
    </delete>
	
	<!-- 插入产品功能开启接口表 -->
	<insert id="addIFPrtFunEnable" parameterClass="java.util.HashMap">
		<![CDATA[
			INSERT INTO dbo.WITPOSA_ProductFuctionEnable(	
				brandAbbr,
				PrtFunDateCode,
				prt_id,
				barcode,
				unitcode,
				version,
				status,
				StartTime,
				EndTime
			)VALUES(
				#brandCode#,
				#PrtFunDateCode#,
				#BIN_ProductVendorID#,
				#BarCode#,
				#UnitCode#,
				#Version#,
				#ValidFlag#,
				#StartDate#,
				#EndDate#
			)
		]]>				
    </insert>
    
   	<!-- 备份产品下发数据备份履历表 -->
	<insert id="backProductIssue" parameterClass="java.util.HashMap">
		<![CDATA[		
		INSERT INTO Interfaces.BIN_ProductIssueDataBackup(
			BIN_OrganizationInfoID,
			BIN_BrandInfoID,
			BIN_ProductID,
			BrandCode,
			BarCode,
			UnitCode,
			BIN_ProductVendorID,
			Version,
			NameTotal,
			SalePrice,
			MemPrice,
			Mode,
			Status,
			StandardCost,
			MaxSalePrice,
			MinSalePrice,
			IsExchanged,
			RecommendedNumDay,
			IsStock,
			Spec,
			ModuleCode,
			
			GoodsType,
			FGoodsMode,
			
			BackupDate,
			businessDate,
			BackupPGM,
			]]>
			<include refid="BINBECMINC99.insertKeySql" />
			<![CDATA[		
		)
		
		SELECT
			#organizationInfoId#,
			#brandInfoId#,
			A.BIN_ProductID,
			C.BrandCode,
			B.BarCode,
			A.UnitCode,	
			B.BIN_ProductVendorID,
			A.Version,
			A.NameTotal,
			ISNULL(D.SalePrice,0) AS SalePrice,
			ISNULL(D.MemPrice,0) AS MemPrice,
			A.Mode,	
			ISNULL(A.Status,'E') AS Status,
			ISNULL(A.StandardCost,0) AS StandardCost,
			ISNULL(A.MaxSalePrice,ISNULL(D.SalePrice,0)) AS maxPrice,
			ISNULL(A.MinSalePrice,0) AS minPrice,
			ISNULL(A.IsExchanged,'0') AS pxEnable,
			A.RecommendedNumDay,
			A.IsStock,
		    Spec,
		    ModuleCode,
		    
			#GoodsType#,
			#FGoodsMode#,
		    
		    GETDATE(),
		    #priceDate#,
		    #updatePGM#,
		    ]]>
		    <include refid="BINBECMINC99.insertValueSql" />
	    <![CDATA[
		FROM
			Basis.BIN_Product A	 WITH(NOLOCK)
			JOIN Basis.BIN_ProductVendor B WITH(NOLOCK) ON(A.BIN_ProductID = B.BIN_ProductID)
			JOIN Basis.BIN_BrandInfo C WITH(NOLOCK) ON(A.BIN_BrandInfoID = C.BIN_BrandInfoID AND C.ValidFlag = '1')
			JOIN(
				SELECT 
					T20.BIN_ProductID,					
					T20.SalePrice,
					T20.MemPrice
				FROM
					(
						SELECT
							BIN_ProductID,
							MAX(StartDate) AS startDate
						FROM
							Basis.BIN_ProductPrice WITH(NOLOCK)
						WHERE
							StartDate <= #priceDate#
						AND Type = '2'
						GROUP BY
							BIN_ProductID
					) T10
					JOIN Basis.BIN_ProductPrice T20 WITH(NOLOCK)
					ON(T10.BIN_ProductID = T20.BIN_ProductID
						AND T10.startDate = T20.StartDate 
						AND T20.Type = '2'
					)
			)D ON(A.BIN_ProductID = D.BIN_ProductID)
			
		WHERE		
			A.BIN_BrandInfoID = #brandInfoId#
		AND	A.Version > #tVersion#
   	    ]]>
	</insert>
	
	<!-- 删除指定产品的BOMlist(根据产品厂商ID) -->
    <delete id="delIFPrtBomSCS" parameterClass="java.util.HashMap">
    	<![CDATA[
    		DELETE FROM 
    			dbo.Product_BOM_SCS
    		WHERE
    			Brand = #brandCode#
    		AND ProductId = #prtVendorId#
		]]>	
    </delete>
    
    <!-- 插入产品功能开启接口表 -->
	<insert id="insertIFPrtBomSCS" parameterClass="java.util.HashMap">
		<![CDATA[
			INSERT INTO dbo.Product_BOM_SCS(	
				Brand
				,comment
				,quantity
				,price
				,created
				,modified
				,ProductId
				,BomProductId
				,BomProductType
			)VALUES(
				#brandCode#,
				#comment#,
				#quantity#,
				#price#,
				GETDATE(),
				GETDATE(),
				#ProductId#,
				#BomProductId#,
				#BomProductType#
			)
		]]>				
    </insert>
    
</sqlMap>
