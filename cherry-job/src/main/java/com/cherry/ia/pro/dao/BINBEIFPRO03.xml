<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="BINBEIFPRO03">
	<!-- 查询新后台柜台产品数据list -->
	<select id="getCouProductList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		<![CDATA[
			SELECT 
				PD.DepartCode,
				PD.BIN_ProductID,
				PV.BIN_ProductVendorID,
				P.UnitCode,
				PV.BarCode,
				PP.StartDate,
				PP.EndDate,
				P.NameTotal,
				CONVERT(Decimal(16,2),PP.SalePrice) AS SalePrice,
				CONVERT(Decimal(16,2),PP.MemPrice) AS MemPrice,
				PD.Version,
				PV.ValidFlag AS prtValidFlag,
				O.ValidFlag AS cntValidFlag,
				PD.ValidFlag AS pdValidFlag,
				ISNULL(P.Status,'E') AS prtStatus,
			CASE 
				WHEN (P.SellStartDate IS NOT NULL AND P.SellEndDate IS NULL AND #priceDate# >= P.SellStartDate) 
				  OR (P.SellEndDate IS NOT NULL AND P.SellStartDate IS NULL AND #priceDate# <= P.SellEndDate)
			      OR (P.SellStartDate IS NOT NULL AND P.SellEndDate IS NOT NULL AND P.SellStartDate <= #priceDate# AND #priceDate# <= P.SellEndDate) 
			      OR (P.SellStartDate IS NULL AND P.SellEndDate IS NULL)
			    THEN '0' ELSE '1' END AS prtSellDateFlag
			FROM 
				Basis.BIN_ProductDepart PD WITH(NOLOCK)
			JOIN 
				Basis.BIN_Organization O WITH(NOLOCK) ON O.DepartCode = PD.DepartCode
			JOIN 
				Basis.BIN_Product P WITH(NOLOCK) ON PD.BIN_ProductID = P.BIN_ProductID
			JOIN 
				Basis.BIN_ProductVendor PV WITH(NOLOCK) ON (P.BIN_ProductID = PV.BIN_ProductID)
			LEFT JOIN 
				Basis.BIN_ProductPrice PP WITH(NOLOCK) 
				ON (	PD.BIN_ProductID = PP.BIN_ProductID 
				    AND PP.Type = '3' 
					AND PD.DepartCode = PP.DepartCode 
					AND PP.BIN_BrandInfoID = PD.BIN_BrandInfoID 
				    AND PP.StartDate <=#priceDate# AND PP.EndDate >= #priceDate#
			    )

			WHERE 
			O.Type = '4'
			AND PD.BIN_OrganizationInfoID = #organizationInfoId#
			AND PD.BIN_BrandInfoID = #brandInfoId#
			AND PD.Version > #tVersion#
			AND P.ValidFlag <> 2

		]]>
    </select>
    
	<!--更新方案中销售日期在业务日期前后1天内的产品的版本号 -->
	<update id="updSoluDetailVerByPrtSellDate" parameterClass="java.util.HashMap">
		UPDATE PPSD
		SET PPSD.Version = #newTVersion#+1
		FROM Basis.BIN_ProductPriceSolutionDetail PPSD 
		JOIN Basis.BIN_ProductPriceSolution PPS  ON PPS.BIN_ProductPriceSolutionID = PPSD.BIN_ProductPriceSolutionID
		WHERE
			PPS.BIN_BrandInfoID = #brandInfoId#
		AND 
		(
			<!-- 销售日期在业务日期前后1天内的产品 -->
		    EXISTS(
				SELECT 1
				FROM Basis.BIN_Product WITH(NOLOCK) 
				WHERE 
					BIN_BrandInfoID = #brandInfoId#
				AND
				(   SellStartDate = DATEADD(day,1,#priceDate#) 
				OR  SellStartDate = DATEADD(day,0,#priceDate#) 
				OR  SellStartDate = DATEADD(day,-1,#priceDate#) 
				OR  SellEndDate = DATEADD(day,1,#priceDate#) 	
				OR  SellEndDate = DATEADD(day,0,#priceDate#) 
				OR  SellEndDate = DATEADD(day,-1,#priceDate#)
				)
				AND PPSD.BIN_ProductID = BIN_ProductID
		    )
		)
    </update>
    
	<!-- 查询新后台柜台产品数据list -->
	<select id="getCouProductListOld" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		<include refid="BINBECMINC99.pageheader" />
		<![CDATA[
			SELECT 
				PD.DepartCode,
				PD.BIN_ProductID,
				PV.BIN_ProductVendorID,
				P.UnitCode,
				PV.BarCode,
				PP.StartDate,
				PP.EndDate,
				P.NameTotal,
				CONVERT(Decimal(16,2),PP.SalePrice) AS SalePrice,
				CONVERT(Decimal(16,2),PP.MemPrice) AS MemPrice
			FROM 
				Basis.BIN_ProductDepart PD WITH(NOLOCK)
			JOIN 
				Basis.BIN_Organization O WITH(NOLOCK) ON O.DepartCode = PD.DepartCode
			JOIN 
				Basis.BIN_Product P WITH(NOLOCK) ON PD.BIN_ProductID = P.BIN_ProductID
			JOIN 
				Basis.BIN_ProductVendor PV WITH(NOLOCK) ON (P.BIN_ProductID = PV.BIN_ProductID AND P.ValidFlag = PV.ValidFlag)
			LEFT JOIN 
				Basis.BIN_ProductPrice PP WITH(NOLOCK) 
				ON (	PD.BIN_ProductID = PP.BIN_ProductID 
				    AND PP.Type = '3' 
					AND PD.DepartCode = PP.DepartCode 
					AND PP.BIN_BrandInfoID = PD.BIN_BrandInfoID 
				    AND PP.StartDate <=#priceDate# AND PP.EndDate >= #priceDate# 
			    )

			WHERE 
				O.ValidFlag = '1' 
			AND O.Type = '4'
			AND PD.BIN_BrandInfoID = #brandInfoId#
			AND P.ValidFlag = '1'
			AND ISNULL(P.Status,'E')!= 'D'
			AND 
			(
			     (P.SellStartDate IS NOT NULL AND P.SellEndDate IS NULL AND #priceDate# >= P.SellStartDate)
			  OR (P.SellEndDate IS NOT NULL AND P.SellStartDate IS NULL AND #priceDate# <= P.SellEndDate)
			  OR (P.SellStartDate IS NOT NULL AND P.SellEndDate IS NOT NULL AND P.SellStartDate <= #priceDate# AND #priceDate# <= P.SellEndDate) 
			  OR (P.SellStartDate IS NULL AND P.SellEndDate IS NULL)
			)

		]]>
		<include refid="BINBECMINC99.pagefooter" />		
    </select>
    
	<!-- 查询新后台产品方案柜台关联数据list -->
	<select id="getPrtSoluCouList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		<![CDATA[
			SELECT
				C.BrandCode, 
				PSDR.DepartCode,
				PPS.SolutionCode,
				PSDR.Version,
				O.ValidFlag AS cntValidFlag,
				PSDR.ValidFlag AS psdValidFlag,
				PPS.ValidFlag AS ppsValidFlag,
				convert(varchar(30),PPS.StartDate,120) AS StartDate,	
				convert(varchar(30),PPS.EndDate,120) AS EndDate
				
			FROM 
				Basis.BIN_PrtSoluDepartRelation PSDR WITH(NOLOCK)
			JOIN 
				Basis.BIN_Organization O WITH(NOLOCK) ON O.DepartCode = PSDR.DepartCode
			JOIN Basis.BIN_BrandInfo C WITH(NOLOCK) ON(PSDR.BIN_BrandInfoID = C.BIN_BrandInfoID AND C.ValidFlag = '1')
			JOIN Basis.BIN_ProductPriceSolution PPS WITH(NOLOCK) ON PPS.BIN_ProductPriceSolutionID = PSDR.BIN_SolutionId
			WHERE 
			O.Type = '4'
			AND PSDR.BIN_OrganizationInfoID = #organizationInfoId#
			AND PSDR.BIN_BrandInfoID = #brandInfoId#
			AND PSDR.Version > #tVersion#
		]]>
    </select>
    
    <!-- 根据指定Version取方案明细的产品信息List -->
    <select id="getPrtSoluDetailByVersionList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			C.BrandCode,
			S.SolutionCode,
			PV.BIN_ProductVendorID,
			PV.BarCode,
			P.UnitCode,
			PPSD.SalePrice,
			PPSD.MemPrice,
			PPSD.PlatinumPrice,
			PPSD.Version,
			
  			PPSD.ValidFlag AS soluPrtValidFlag,
  			PV.ValidFlag AS prtVendorValidFlag,
			PPSD.BIN_ProductPriceSolutionDetailID AS productPriceSolutionDetailID,
		    PPSD.BIN_ProductID,
  			S.StartDate,
  			S.EndDate,
 			ISNULL(P.Status,'E') AS prtStatus,
 			<![CDATA[
			CASE 
				WHEN (P.SellStartDate IS NOT NULL AND P.SellEndDate IS NULL AND #priceDate# >= P.SellStartDate) 
				  OR (P.SellEndDate IS NOT NULL AND P.SellStartDate IS NULL AND #priceDate# <= P.SellEndDate)
			      OR (P.SellStartDate IS NOT NULL AND P.SellEndDate IS NOT NULL AND P.SellStartDate <= #priceDate# AND #priceDate# <= P.SellEndDate) 
			      OR (P.SellStartDate IS NULL AND P.SellEndDate IS NULL)
			    THEN '0' ELSE '1' END AS prtSellDateFlag
		    ]]>	

		FROM  
			Basis.BIN_ProductPriceSolutionDetail PPSD WITH(NOLOCK)
		JOIN 
			Basis.BIN_ProductPriceSolution S WITH(NOLOCK) ON S.BIN_ProductPriceSolutionID = PPSD.BIN_ProductPriceSolutionID
		JOIN Basis.BIN_Product P WITH(NOLOCK) ON P.BIN_ProductID = PPSD.BIN_ProductID
		JOIN Basis.BIN_BrandInfo C WITH(NOLOCK) ON(P.BIN_BrandInfoID = C.BIN_BrandInfoID AND C.ValidFlag = '1')
		JOIN Basis.BIN_ProductVendor PV WITH(NOLOCK) ON PV.BIN_ProductID = PPSD.BIN_ProductID
		WHERE
			S.BIN_OrganizationInfoID = #organizationInfoId#
		AND S.BIN_BrandInfoID = #brandInfoId#
		AND PPSD.Version > #tVersion# 
    </select>
    
    <!-- 删除接口数据库产品信息  -->
    <delete id="delIFProductWithCounter" parameterClass="java.util.HashMap">
    	<![CDATA[
    		delete from 
    			dbo.WITPOSA_product_with_counter 
    		where 
    			brand = #brandCode#
    		and ProductId = #BIN_ProductVendorID#
    		and counter = #DepartCode#
		]]>	
    </delete>
    
    <!-- 删除产品方案柜台接口表  -->
    <delete id="delIFPrtSoluWithCounter" parameterClass="java.util.HashMap">
    	<![CDATA[
    		delete from 
    			dbo.WITPOSA_prtsolu_with_counter 
    		where 
    			brandAbbr = #brandCode#
    		and counterCode = #DepartCode#
		]]>	
    </delete>
    
    <!-- 删除接口数据库产品方案明细数据 -->
    <delete id="delIFPrtSoluSCS" parameterClass="java.util.HashMap">
    	<![CDATA[
    		DELETE FROM 
    			dbo.WITPOSA_product_price_solution_detail
    		WHERE
    			brandAbbr = #brandCode#
    		  AND productPriceSolutionDetailID IN
    			]]>
		<iterate property="prtUpdList" open="(" close=")" conjunction=",">
			#prtUpdList[].productPriceSolutionDetailID#
		</iterate>

    </delete>
    
	<!-- 插入柜台产品接口数据库 -->
	<insert id="addProductWithCounter" parameterClass="java.util.HashMap">
		<![CDATA[
			INSERT INTO dbo.WITPOSA_product_with_counter(	
				brand,
				counter,
				ProductId,
				barcode,
				unitcode,
				price,
				MemberPrice,
				version,
				status
			)VALUES(
				#brandCode#,
				#DepartCode#,
				#BIN_ProductVendorID#,
				#BarCode#,
				#UnitCode#,
				#SalePrice#,
				#MemPrice#,
				#Version#,
				#prtWithCnt_status#
			)
		]]>				
    </insert>
    
	<!-- 插入柜台产品接口数据库 -->
	<insert id="addIFPrtSoluWithCounter" parameterClass="java.util.HashMap">
		<![CDATA[
			INSERT INTO dbo.WITPOSA_prtsolu_with_counter(	
				brandAbbr,
				counterCode,
				prtSolutionCode,
				startTime,
				endTime,
				version,
				status
			)VALUES(
				#brandCode#,
				#DepartCode#,
				#SolutionCode#,
				#StartDate#,
				#EndDate#,
				#Version#,
				#prtSoluWithCnt_status#
			)
		]]>				
    </insert>
    
	<!-- 插入产品方案明细接口数据库 -->
	<insert id="addIFPrtSoluSCS" parameterClass="java.util.HashMap">
		<![CDATA[
			INSERT INTO dbo.WITPOSA_product_price_solution_detail(	
				brandAbbr,
				prtSolutionCode,
				prt_id,
				barcode,
				unitcode,
				price,
				MemberPrice,
				PlatinumPrice,
				version,
				status,
				productPriceSolutionDetailID
			)VALUES(
				#brandCode#,
				#SolutionCode#,
				#BIN_ProductVendorID#,
				#BarCode#,
				#UnitCode#,
				ISNULL(#SalePrice#,0),
				ISNULL(#MemPrice#,0),
				ISNULL(#PlatinumPrice#,0),
				#Version#,
				#prtSoluDetail_status#,
				#productPriceSolutionDetailID#
			)
		]]>				
    </insert>
    
    <!-- 删除接口数据库柜台产品信息  -->
    <delete id="delIFCouProduct" parameterClass="java.util.HashMap">
    	<![CDATA[delete from dbo.WITPOSA_product_with_counter where brand = #brandCode#]]>	
    </delete>
    
    <!-- 取得品牌Code  -->
    <select id="getBrandCode" parameterClass="java.util.HashMap" resultClass="java.lang.String">
       <![CDATA[
			SELECT
				BrandCode AS brandCode
			FROM
				Basis.BIN_BrandInfo WITH(NOLOCK)
			WHERE
				BIN_BrandInfoID = #brandInfoId#
		]]>	
    </select>
    
    <!-- *********************************  区域城市/渠道的柜台变化  ************************************************************************************************ -->
    
   	<!-- 取得产品方案配置信息List -->
    <select id="getDPConfigDetailList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			BIN_SolutionId AS productPriceSolutionID,
	  		PlaceType,
			SaveJson
		FROM 
			Basis.BIN_DepartProductConfigDetail WITH(NOLOCK)
	  	WHERE
			BIN_OrganizationInfoID = #organizationInfoId#
		AND	BIN_BrandInfoID = #brandInfoId# 
		<isNotEmpty property="palceTypeList" prepend="AND">
			PlaceType IN
			<iterate conjunction="," open="(" close=")" property="palceTypeList">  
		        #palceTypeList[]#
		    </iterate>
		</isNotEmpty> 
	  	ORDER BY UpdateTime ASC
    </select>
    
    <!-- 取得方案配置的区域或渠道实际的的柜台与以前配置的差异(区域城市/渠道)List -->
   	<select id="getCntForPrtSoluCityChannelDiff" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		;WITH PD AS (
			 <!--  取得方案配置的区域或渠道实际的的柜台List -->
			<isNotEqual property="SaveJson" compareValue="[]">
			SELECT 
			t.BIN_SolutionId,
			t.PlaceType,
			D.CounterCode AS counterCode,
			<isNotEmpty property="city">
				oz.BIN_CityID AS place
			</isNotEmpty>
			<isNotEmpty property="channel">
				D.BIN_ChannelID AS place
			</isNotEmpty>
			<isNotEmpty property="counter">
				0 AS place
			</isNotEmpty>
			FROM Basis.BIN_CounterInfo D WITH(NOLOCK)
			JOIN Basis.BIN_Organization oz WITH(NOLOCK) ON(D.BIN_OrganizationID = oz.BIN_OrganizationID)
			<!-- 配置的时候有权限
			JOIN(
			<include refid="BINOLCMINC99.departPrivilegeSql" />
			) dp ON(dp.BIN_OrganizationID = oz.BIN_OrganizationID)
			-->
			JOIN (
					<![CDATA[
					select
						a.BIN_SolutionId,
						a.PlaceType,
						case when (a.PlaceType = 2 OR a.PlaceType = 4 or a.PlaceType = 6 or a.PlaceType = 7) then SUBSTRING(b.place,2,LEN(b.place)-2) else b.place end AS place
					from(
						select BIN_SolutionId,PlaceType ,place=convert(xml,'<root><v>'+replace(SUBSTRING(SaveJson,2,LEN(SaveJson)-2),',','</v><v>')+'</v></root>') 
					 	from Basis.BIN_DepartProductConfigDetail WITH(NOLOCK)
					 	where BIN_SolutionId = #productPriceSolutionID# and BIN_OrganizationInfoID = #organizationInfoId# AND BIN_BrandInfoID = #brandInfoId#
				 	)a
					outer apply(
						select 
				     		place=C.v.value('.','nvarchar(max)') 
						from 
							a.place.nodes('/root/v')C(v)
					)b
					]]>
	
			) t on 
			<!-- on 条件 根据方案配置表的地点类型，指定区域或指定渠道或指定柜台  -->
			<isNotEmpty property="city">
				t.place = oz.BIN_CityID
			</isNotEmpty>
			<isNotEmpty property="channel">
				t.place = D.BIN_ChannelID
			</isNotEmpty>
			<isNotEmpty property="counter">
				t.place = D.CounterCode
			</isNotEmpty>
			
			WHERE
				D.BIN_OrganizationInfoID = #organizationInfoId#
			AND D.BIN_BrandInfoID = #brandInfoId#
			AND D.ValidFlag = '1'
		</isNotEqual>
		<isEqual property="SaveJson" compareValue="[]">
			SELECT BIN_SolutionId,PlaceType,null as counterCode,  SaveJson AS place
			from Basis.BIN_DepartProductConfigDetail WITH(NOLOCK)
			where BIN_SolutionId = #productPriceSolutionID# and BIN_OrganizationInfoID = #organizationInfoId# AND BIN_BrandInfoID = #brandInfoId#
		</isEqual>
		),
		PDH AS (
		<!--取得履历表方案配置的区域或渠道的柜台List -->
			select
				a.BIN_SolutionId,
				a.placeType,
				a.place,
				SUBSTRING(b.counterCode,2,LEN(b.counterCode)-2) AS counterCode
			from (
			<![CDATA[	
				select BIN_SolutionId,PlaceType ,place,counterCode=convert(xml,'<root><v>'+replace(SUBSTRING(DepartCodeJson,2,LEN(DepartCodeJson)-2),',','</v><v>')+'</v></root>') from Basis.BIN_PrtSoluWithDepartHis WITH(NOLOCK)
				where BIN_SolutionId = #productPriceSolutionID# and BIN_OrganizationInfoID = #organizationInfoId# AND BIN_BrandInfoID = #brandInfoId#)a
				outer apply(
					select 
						counterCode=C.v.value('.','nvarchar(max)') 
					from 
						a.counterCode.nodes('/root/v')C(v)
				)b
			]]>
		)
		
		SELECT 
			T.BIN_SolutionId,
			T.placePD,
			T.placePDH,
			T.CntPD,
			T.CntPDH,
			<!-- modifyFlag  add 增加的柜台 、sub减少的柜台 -->
			CASE WHEN ( CntPDH IS NULL and CntPD IS NOT NULL) THEN 'add' 
		     	WHEN ( CntPDH IS NOT NULL and CntPD IS NULL) THEN 'sub'
	         	ELSE '-' END AS 'modifyFlag' 
		          
		FROM (
			<!-- 减少的柜台 -->
			select  A.BIN_SolutionId,A.counterCode AS CntPDH,B.counterCode AS CntPD,A.place AS placePDH,B.place AS placePD
			from PDH A 
			left join PD B on A.BIN_SolutionId = B.BIN_SolutionId AND A.placeType = B.PlaceType AND A.place = B.place AND A.counterCode = B.counterCode
			union
			<!--  增加的柜台 -->
			select B.BIN_SolutionId,A.counterCode AS CntPDH,B.counterCode AS CntPD,A.place AS placePDH,B.place AS placePD
			from PDH A 
			right join PD B on A.BIN_SolutionId = B.BIN_SolutionId AND A.placeType = B.PlaceType AND A.place = B.place AND A.counterCode = B.counterCode
		) T
		WHERE
			(T.CntPD IS NOT NULL AND T.CntPDH IS NULL) OR (T.CntPD IS NULL AND T.CntPDH IS NOT NULL)
		ORDER BY T.BIN_SolutionId
   	</select>
   	
    <!-- 取方案明细的产品信息List -->
    <select id="getPrtPriceSoluDetailList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
			SD.BIN_ProductPriceSolutionDetailID AS productPriceSolutionDetailID,
		    SD.BIN_ProductID,
		    SD.PriceJson,
  			S.StartDate,
  			S.EndDate,
  			A.ValidFlag,
  			ISNULL(A.Status,'E') AS Status,
  			<![CDATA[
			CASE 
				WHEN (A.SellStartDate IS NOT NULL AND A.SellEndDate IS NULL AND #priceDate# >= A.SellStartDate) 
				  OR (A.SellEndDate IS NOT NULL AND A.SellStartDate IS NULL AND #priceDate# <= A.SellEndDate)
			      OR (A.SellStartDate IS NOT NULL AND A.SellEndDate IS NOT NULL AND A.SellStartDate <= #priceDate# AND #priceDate# <= A.SellEndDate) 
			      OR (A.SellStartDate IS NULL AND A.SellEndDate IS NULL)
			    THEN '0' ELSE '1' END AS SellDateFlag
		    ]]>
		FROM  
			Basis.BIN_ProductPriceSolutionDetail SD WITH(NOLOCK)
		JOIN 
			Basis.BIN_ProductPriceSolution S WITH(NOLOCK) ON S.BIN_ProductPriceSolutionID = SD.BIN_ProductPriceSolutionID
		JOIN Basis.BIN_Product A WITH(NOLOCK) ON A.BIN_ProductID = SD.BIN_ProductID
		WHERE 
			SD.BIN_ProductPriceSolutionID = #productPriceSolutionID#
		AND S.BIN_OrganizationInfoID = #organizationInfoId#
		AND S.BIN_BrandInfoID = #brandInfoId# 
    </select>
    
   	
    <!-- 更新部门产品表的数据  -->
   	<select id="mergeProductDepartInfo" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		MERGE  Basis.BIN_ProductDepart AS TGT
		    USING (select #organizationInfoId# as orgId,#brandInfoId# as brandInfoId,#BIN_ProductID# as productId, #CounterCode# as departCode
		           ) AS SRC
		    ON TGT.BIN_OrganizationInfoID = SRC.orgId and 
			    TGT.BIN_BrandInfoID = SRC.brandInfoId and
		        TGT.BIN_ProductId = SRC.productId and
		        TGT.DepartCode = SRC.departCode
		WHEN MATCHED THEN 
		    UPDATE SET TGT.BIN_ProductId = SRC.productId,DepartCode = SRC.departCode,Version = #tVersion# + 1,ValidFlag = #ValidFlag#,
		    <include refid="BINBECMINC99.updateSql" />
		WHEN NOT MATCHED THEN 
		    INSERT (BIN_OrganizationInfoID,BIN_BrandInfoID,BIN_ProductID,DepartCode,Version,ValidFlag,
		    		CreateTime,UpdateTime, CreatedBy, CreatePGM,UpdatedBy, UpdatePGM,ModifyCount)
		        values(SRC.orgId,SRC.brandInfoId,SRC.productId,SRC.departCode, #tVersion# + 1,#ValidFlag#,
		        GETDATE(),GETDATE(),#createdBy#,#createPGM#,#updatedBy#,#updatePGM#,0)
		OUTPUT inserted.BIN_ProductDepartID;
   	</select>
   	
    <!-- merge产品方案部门关系表-->
   	<select id="mergePrtSoluDepartRelation" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		MERGE  Basis.BIN_PrtSoluDepartRelation AS TGT
		    USING (select #organizationInfoId# as orgId,#brandInfoId# as brandInfoId,#productPriceSolutionID# as productPriceSolutionID, #CounterCode# as departCode
		           ) AS SRC
		    ON TGT.BIN_OrganizationInfoID = SRC.orgId and 
			    TGT.BIN_BrandInfoID = SRC.brandInfoId and
		        TGT.DepartCode = SRC.departCode
		WHEN MATCHED THEN 
		    UPDATE SET TGT.BIN_SolutionId = SRC.productPriceSolutionID,DepartCode = SRC.departCode,Version = #tVersion# + 1,ValidFlag = #ValidFlag#,
		    <include refid="BINOLCMINC99.updateSql" />
		WHEN NOT MATCHED THEN 
		    INSERT (BIN_OrganizationInfoID,BIN_BrandInfoID,BIN_SolutionId,DepartCode,Version,ValidFlag,
		    		CreateTime,UpdateTime, CreatedBy, CreatePGM,UpdatedBy, UpdatePGM,ModifyCount)
		        values(SRC.orgId,SRC.brandInfoId,SRC.productPriceSolutionID,SRC.departCode, #tVersion# + 1,#ValidFlag#,
		        GETDATE(),GETDATE(),#createdBy#,#createPGM#,#updatedBy#,#updatePGM#,0)
		OUTPUT inserted.BIN_ProductSoluDepartID;
   	</select>
   	
    <!-- 插入产品价格表  -->
	<insert id="insertProductPrice" parameterClass="java.util.HashMap">
        <![CDATA[ 
		INSERT INTO Basis.BIN_ProductPrice(	
			BIN_ProductID,
			BIN_BrandInfoID,
			SalePrice,
			MemPrice,
			StartDate,
			EndDate,	
			DepartCode,		
			Type,		
		]]>	
		<include refid="BINBECMINC99.insertKeySql" />	
		<![CDATA[			
        )VALUES	(
			#productId#,
			#brandInfoId#,
			ISNULL(#salePrice#,0),
			ISNULL(#memPrice#,0),
			#priceStartDate#,
			#priceEndDate#,							
			#departCode#,
			#type#,							
       	]]>
	   	<include refid="BINBECMINC99.insertValueSql" />
		<![CDATA[ ) ]]>
    </insert>
    
   	<!-- 将方案绑定柜台对应的部门产品表的数据无效  -->
	<update id="updProductDepart" parameterClass="java.util.HashMap">
		<![CDATA[	
			UPDATE PD
				SET 
				PD.ValidFlag = '0',
				Version = #tVersion# + 1,
		]]>
		<include refid="BINBECMINC99.updateSql" />
		<![CDATA[	
			FROM Basis.BIN_ProductDepart PD
			WHERE
				BIN_OrganizationInfoID = #organizationInfoId#
			AND	BIN_BrandInfoID = #brandInfoId#
			AND DepartCode = #CounterCode#
		]]>
		 AND BIN_ProductID = #BIN_ProductID# 
	</update>
	
   	<!-- 将产品方案部门关系表的数据无效  -->
	<update id="updPrtSoluDepartRelation" parameterClass="java.util.HashMap">
		<![CDATA[	
			UPDATE PSD
				SET 
				PSD.ValidFlag = (CASE WHEN (#psdValidFlag# = 1 AND oz.ValidFlag = '1' AND PPSD.ValidFlag = '1' ) THEN '1' ELSE '0' END),
				PSD.Version = #tVersion# + 1,
				
				PSD.UpdateTime=GETDATE(),
				PSD.UpdatedBy=#updatedBy#,
				PSD.UpdatePGM=#updatePGM#,
				PSD.ModifyCount=PSD.ModifyCount+1
		]]>
		<![CDATA[	
			FROM Basis.BIN_PrtSoluDepartRelation PSD,
			Basis.BIN_Organization oz ,
			Basis.BIN_ProductPriceSolutionDetail PPSD
			WHERE
				oz.DepartCode = PSD.DepartCode
			AND	PSD.BIN_OrganizationInfoID = #organizationInfoId#
			AND	PSD.BIN_BrandInfoID = #brandInfoId#
			AND PSD.DepartCode = #CounterCode#
			AND PSD.BIN_SolutionId = #productPriceSolutionID#
		]]>
	</update>
	
	<!-- 删除方案绑定柜台对应的部门产品价格 -->
	<delete id="delProductDepartPrice" parameterClass="java.util.HashMap">
	<![CDATA[
		DELETE  
		FROM Basis.BIN_ProductPrice 
		WHERE BIN_BrandInfoID = #brandInfoId# 
		AND Type = '3'
		AND DepartCode = #CounterCode#
		]]>
		AND BIN_ProductID = #BIN_ProductID#
    </delete>
	
	<!-- 删除方案配置履历表中指定的方案 -->
	<delete id="delPrtSoluWithDepartHis" parameterClass="java.util.HashMap">
	<![CDATA[
  		DELETE 
			Basis.BIN_PrtSoluWithDepartHis
		WHERE 
			BIN_SolutionId = #productPriceSolutionID#
		]]>
    </delete>
    
    <!-- 通过方案柜台配置表的城市/渠道或指定柜台取得系统中的有效柜台用以拼接json以及方案明细产品拼接json -->
    <sql id="queryDepartCodeJsonAndPrtSoluDetailJsonSql">
		SELECT 
			TT.BIN_SolutionId,
			#placeType# AS PlaceType,
			#place# AS place,
			<isEqual property="SaveJson" compareValue="[]">
				DepartCodeJson = '[]', 
			</isEqual>
			<isNotEqual property="SaveJson" compareValue="[]">
			
			<isNotEmpty property="placeTypeFlag">
				DepartCodeJson = '[' + stuff(
				(select ',' + cast( counterCode as varchar) from 
					(
						SELECT 
						t.BIN_SolutionId,
						'"'+D.CounterCode +'"' AS counterCode
						FROM Basis.BIN_CounterInfo D WITH(NOLOCK)
						JOIN Basis.BIN_Organization oz WITH(NOLOCK) ON(D.BIN_OrganizationID = oz.BIN_OrganizationID AND oz.ValidFlag = '1')
						<!-- 配置的时候有权限
						JOIN(
						<include refid="BINOLCMINC99.departPrivilegeSql" />
						) dp ON(dp.BIN_OrganizationID = oz.BIN_OrganizationID)
						 -->
						JOIN (
							<!-- 将[1,2,3]格式的saveJson变成多行以便与柜台关联 -->
							<![CDATA[
							select
							a.BIN_SolutionId,a.PlaceType,b.place
							from
							(select BIN_SolutionId,PlaceType ,place=convert(xml,'<root><v>'+replace(SUBSTRING(SaveJson,2,LEN(SaveJson)-2),',','</v><v>')+'</v></root>') 
							 from Basis.BIN_DepartProductConfigDetail WITH(NOLOCK)
							where BIN_SolutionId = #productPriceSolutionID# and BIN_OrganizationInfoID = #organizationInfoId# and BIN_BrandInfoID = #brandInfoId#)a
							outer apply
								(select 
									place=C.v.value('.','nvarchar(max)') 
								 from 
									a.place.nodes('/root/v')C(v)
							)b
							]]>	
						) t on 
						<!-- 城市/渠道 -->
						<isEqual property="placeTypeFlag" compareValue="CityOrChannel">
							<!-- on 条件 根据方案配置表的地点类型，指定区域或指定渠道 -->
							<isNotEmpty property="city">
								t.place = oz.BIN_CityID
							</isNotEmpty>
							<isNotEmpty property="channel">
								t.place = D.BIN_ChannelID
							</isNotEmpty>
						</isEqual>
						<!-- 指定柜台(包括导入柜台) -->
						<isEqual property="placeTypeFlag" compareValue="counter">
							D.CounterCode = SUBSTRING(t.place,2,LEN(t.place)-2)
						</isEqual>
						WHERE
							D.BIN_OrganizationInfoID = #organizationInfoId#
						AND D.BIN_BrandInfoID = #brandInfoId#
						<!-- 城市/渠道 -->
						<isEqual property="placeTypeFlag" compareValue="CityOrChannel">
						AND t.place = #place#
						</isEqual>
					) T1
						WHERE TT.BIN_SolutionId = T1.BIN_SolutionId for xml path ('')),
				1 ,
				1 ,
				'') + ']',
			</isNotEmpty>
			</isNotEqual>
			PrtSoluDetailJson = '['
			<!--
				 + (
                stuff(
                        (
						SELECT 
							',' + '{' +cast( PPSD.BIN_ProductID as varchar) + ':' + PPSD.PriceJson  + '}'
						FROM Basis.BIN_DepartProductConfigDetail DPCD 
						JOIN Basis.BIN_ProductPriceSolutionDetail PPSD ON DPCD.BIN_SolutionId = PPSD.BIN_ProductPriceSolutionID
						WHERE 
							DPCD.BIN_OrganizationInfoID = #organizationInfoId#
						AND DPCD.BIN_BrandInfoID = #brandInfoId#
						AND DPCD.BIN_SolutionId = TT.BIN_SolutionId for xml path ('')),
                        1 ,
                        1 ,
                        '')
                ) 
             -->
                + ']'
		FROM Basis.BIN_DepartProductConfigDetail TT WITH(NOLOCK)
		WHERE
			TT.BIN_OrganizationInfoID = #organizationInfoId#
		AND TT.BIN_BrandInfoID = #brandInfoId#
		AND TT.BIN_SolutionId = #productPriceSolutionID#
    </sql>
    
	<!-- 更新产品方案配置履历表  -->
	<select id="mergePrtSoluWithDepartHis" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		MERGE  Basis.BIN_PrtSoluWithDepartHis AS TGT
			USING (  
			<include refid="BINBEIFPRO03.queryDepartCodeJsonAndPrtSoluDetailJsonSql"/>
		    ) AS SRC
		    ON TGT.BIN_SolutionId = SRC.BIN_SolutionId AND TGT.PlaceType = SRC.PlaceType AND TGT.place = SRC.place
		WHEN MATCHED THEN 
		    UPDATE SET 
		    	DepartCodeJson = SRC.DepartCodeJson,
		    	PrtSoluDetailJson = SRC.PrtSoluDetailJson,
		    	PlaceType=#placeType#,
		    	Place = #place#,
		    	<include refid="BINBECMINC99.updateSql" />
		WHEN NOT MATCHED THEN 
		    INSERT (
		    	BIN_OrganizationInfoID,
		    	BIN_BrandInfoID,
		    	BIN_SolutionId,
		    	DepartCodeJson,
		    	PrtSoluDetailJson,
		    	PlaceType,
		    	Place,
		    	<include refid="BINBECMINC99.insertKeySql" />
		    	)
	        VALUES(
	        	#organizationInfoId#,
	        	#brandInfoId#,
	        	SRC.BIN_SolutionId,
	        	SRC.DepartCodeJson,
	        	SRC.PrtSoluDetailJson,
	        	#placeType#,
	        	#place#,
	        	<include refid="BINBECMINC99.insertValueSql" />
	        	)
		OUTPUT inserted.BIN_PrtSoluWithDepartHisID;
	</select>
	
    <!-- 取得产品价格方案List -->
    <select id="getPrtPriceSolutionList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		<![CDATA[
		SELECT
			  BIN_ProductPriceSolutionID AS solutionID,
		      SolutionName AS solutionName
		FROM Basis.BIN_ProductPriceSolution WITH(NOLOCK)
		WHERE 
			BIN_OrganizationInfoID = #organizationInfoId#
		AND BIN_BrandInfoID = #brandInfoId#
		AND ValidFlag = '1'
		]]>
    </select>
    
    <!-- 取得产品方案明细表的产品与以前配置的差异List -->
   	<select id="getPrtForPrtSoluDetailDiff" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
   		<isEqual property="soluAddModeConf" compareValue="2">
		 ;WITH PD AS (
			<!-- 产品方案中产品分类对应的产品 -->
			SELECT 
				DISTINCT P.BIN_ProductID 
			FROM Basis.BIN_Product P WITH(NOLOCK) 
			JOIN Basis.BIN_PrtCategory PC WITH(NOLOCK) ON PC.BIN_ProductID = P.BIN_ProductID
			WHERE 
				P.BIN_OrganizationInfoID = #organizationInfoId#
			AND P.BIN_BrandInfoID = #brandInfoId#
			AND P.ValidFlag = 1
			AND EXISTS (
				SELECT 1 
				FROM Basis.BIN_ProductPriceSolutionCateDetail cateDetail WITH(NOLOCK) 
				JOIN Basis.BIN_ProductPriceSolution PPS WITH(NOLOCK) ON cateDetail.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
				WHERE 
					PPS.BIN_OrganizationInfoID = #organizationInfoId#
				AND PPS.BIN_BrandInfoID = #brandInfoId#
				AND PPS.BIN_ProductPriceSolutionID = #productPriceSolutionID# AND cateDetail.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
			)
		)	
		</isEqual>
   		<isEqual property="soluAddModeConf" compareValue="3">
			;WITH PC AS (
			    <!-- 大分类 -->
				SELECT 
					 distinct PC.BIN_ProductID,'LargeCate' AS CateType
				FROM Basis.BIN_Product P WITH(NOLOCK) 
				JOIN Basis.BIN_PrtCategory PC WITH(NOLOCK) ON PC.BIN_ProductID = P.BIN_ProductID
				JOIN Basis.BIN_PrtCatPropValue PCPV WITH(NOLOCK) ON PCPV.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
				JOIN Basis.BIN_PrtCatProperty PCP WITH(NOLOCK) ON PCP.BIN_PrtCatPropertyID = PCPV.BIN_PrtCatPropertyID
				
				WHERE 
					P.BIN_OrganizationInfoID = #organizationInfoId#
				AND P.BIN_BrandInfoID = #brandInfoId#
				AND P.ValidFlag = 1
				AND PCP.TeminalFlag = '1'
				AND EXISTS (
					SELECT 1 
					FROM Basis.BIN_ProductPriceSolutionCateDetail cateDetail WITH(NOLOCK) 
					JOIN Basis.BIN_ProductPriceSolution PPS WITH(NOLOCK) ON cateDetail.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
					WHERE 
						PPS.BIN_OrganizationInfoID = #organizationInfoId#
					AND PPS.BIN_BrandInfoID = #brandInfoId#
					AND PPS.BIN_ProductPriceSolutionID = #productPriceSolutionID# AND cateDetail.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
				)
				UNION
				<!-- 中分类 -->
				SELECT 
					 distinct PC.BIN_ProductID,'MediumCate' AS CateType
				FROM Basis.BIN_Product P WITH(NOLOCK) 
				JOIN Basis.BIN_PrtCategory PC WITH(NOLOCK) ON PC.BIN_ProductID = P.BIN_ProductID
				JOIN Basis.BIN_PrtCatPropValue PCPV WITH(NOLOCK) ON PCPV.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
				JOIN Basis.BIN_PrtCatProperty PCP WITH(NOLOCK) ON PCP.BIN_PrtCatPropertyID = PCPV.BIN_PrtCatPropertyID
				
				WHERE 
					P.BIN_OrganizationInfoID = #organizationInfoId#
				AND P.BIN_BrandInfoID = #brandInfoId#
				AND P.ValidFlag = 1
				AND PCP.TeminalFlag = '3'
				AND EXISTS (
					SELECT 1 
					FROM Basis.BIN_ProductPriceSolutionCateDetail cateDetail WITH(NOLOCK) 
					JOIN Basis.BIN_ProductPriceSolution PPS WITH(NOLOCK) ON cateDetail.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
					WHERE 
						PPS.BIN_OrganizationInfoID = #organizationInfoId#
					AND PPS.BIN_BrandInfoID = #brandInfoId#
					AND PPS.BIN_ProductPriceSolutionID = #productPriceSolutionID# AND cateDetail.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
				)
				UNION
				<!-- 小分类 -->
				SELECT 
					 distinct PC.BIN_ProductID,'SmallCate' AS CateType
				FROM Basis.BIN_Product P WITH(NOLOCK) 
				JOIN Basis.BIN_PrtCategory PC WITH(NOLOCK) ON PC.BIN_ProductID = P.BIN_ProductID
				JOIN Basis.BIN_PrtCatPropValue PCPV WITH(NOLOCK) ON PCPV.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
				JOIN Basis.BIN_PrtCatProperty PCP WITH(NOLOCK) ON PCP.BIN_PrtCatPropertyID = PCPV.BIN_PrtCatPropertyID
				
				WHERE 
					P.BIN_OrganizationInfoID = #organizationInfoId#
				AND P.BIN_BrandInfoID = #brandInfoId#
				AND P.ValidFlag = 1
				AND PCP.TeminalFlag = '2'
				AND EXISTS (
					SELECT 1 
					FROM Basis.BIN_ProductPriceSolutionCateDetail cateDetail WITH(NOLOCK) 
					JOIN Basis.BIN_ProductPriceSolution PPS WITH(NOLOCK) ON cateDetail.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
					WHERE 
						PPS.BIN_OrganizationInfoID = #organizationInfoId#
					AND PPS.BIN_BrandInfoID = #brandInfoId#
					AND PPS.BIN_ProductPriceSolutionID = #productPriceSolutionID# AND cateDetail.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
				)
			),
			t2 AS (
			    SELECT BIN_ProductID,
			           COUNT(DISTINCT CateType) gcount
			      FROM PC
			  GROUP BY BIN_ProductID
			)
			,t3 AS (
			    SELECT COUNT(DISTINCT CateType) gcount
			      FROM PC
			)
			,PD AS (
			SELECT t2.BIN_ProductID
			  FROM t2, t3
			 WHERE t2.gcount = t3.gcount
			)
		</isEqual>
		,PDH AS (
			<!-- 产品方案中的通过产品分类添加的产品 -->
			SELECT PPSD.BIN_ProductID
			FROM Basis.BIN_ProductPriceSolutionDetail PPSD 
			JOIN Basis.BIN_ProductPriceSolution PPS ON PPSD.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
			WHERE 
				PPS.BIN_OrganizationInfoID = #organizationInfoId#
			AND PPS.BIN_BrandInfoID = #brandInfoId#
			AND PPS.BIN_ProductPriceSolutionID = #productPriceSolutionID# 
			AND PPSD.ValidFlag = 1
			AND PPSD.isCate IS NOT NULL
		)
		
		SELECT
			 CASE WHEN ( prtPDH IS null and prtPD IS not null)  THEN 'add' 
		     	  WHEN ( prtPDH IS not null and prtPD IS null) THEN 'sub'
		     	  ELSE '-' END AS 'modifyFlag' ,
	     	  prtPD,
	     	  prtPDH,
	     	  PP.SalePrice AS salePrice,
	     	  PP.MemPrice AS memPrice
		FROM
		(
		<!-- 分类中添加的产品的merge -->
		select  A.BIN_ProductID AS prtPDH,B.BIN_ProductID AS prtPD,
				case when ( A.BIN_ProductID IS null and B.BIN_ProductID IS not null) then B.BIN_ProductID 
				when ( A.BIN_ProductID IS not null and B.BIN_ProductID IS null) then A.BIN_ProductID
				else B.BIN_ProductID end as productId
		from PDH A 
		left join PD B on A.BIN_ProductID = B.BIN_ProductID
		union
		<!-- 分类中减少的产品update isCate设为null -->
		select  A.BIN_ProductID AS prtPDH,B.BIN_ProductID AS prtPD,
				case when ( A.BIN_ProductID IS null and B.BIN_ProductID IS not null)  then B.BIN_ProductID 
		 		when ( A.BIN_ProductID IS not null and B.BIN_ProductID IS null) then A.BIN_ProductID
				else B.BIN_ProductID end as productId
		from PDH A 
		right join PD B on A.BIN_ProductID = B.BIN_ProductID	
		) T
		LEFT JOIN Basis.BIN_ProductPrice PP WITH(NOLOCK) 
			<![CDATA[ON (PP.BIN_ProductID = T.productId AND PP.Type = '2' AND PP.EndDate >= #priceDate# AND PP.StartDate <= #priceDate#) ]]>
		WHERE (T.prtPD IS NOT NULL AND T.prtPDH IS NULL) OR (T.prtPD IS NULL AND T.prtPDH IS NOT NULL)
   	</select>

	<!-- 方案明细 -->
	<sql id="productCategoryQuery">
		<!-- 大分类 -->
		SELECT
		distinct PC.BIN_ProductID,'LargeCate' AS CateType
		FROM Basis.BIN_Product P WITH(NOLOCK)
		JOIN Basis.BIN_PrtCategory PC WITH(NOLOCK) ON PC.BIN_ProductID = P.BIN_ProductID
		JOIN Basis.BIN_PrtCatPropValue PCPV WITH(NOLOCK) ON PCPV.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
		JOIN Basis.BIN_PrtCatProperty PCP WITH(NOLOCK) ON PCP.BIN_PrtCatPropertyID = PCPV.BIN_PrtCatPropertyID

		WHERE
		P.BIN_OrganizationInfoID = #organizationInfoId#
		AND P.BIN_BrandInfoID = #brandInfoId#
		AND P.ValidFlag = 1
		AND PCP.TeminalFlag = '1'
		AND EXISTS (
		SELECT 1
		FROM Basis.BIN_ProductPriceSolutionCateDetail cateDetail WITH(NOLOCK)
		JOIN Basis.BIN_ProductPriceSolution PPS WITH(NOLOCK) ON cateDetail.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
		WHERE
		PPS.BIN_OrganizationInfoID = #organizationInfoId#
		AND PPS.BIN_BrandInfoID = #brandInfoId#
		AND PPS.BIN_ProductPriceSolutionID = #productPriceSolutionID# AND cateDetail.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
		)
		UNION
		<!-- 中分类 -->
		SELECT
		distinct PC.BIN_ProductID,'MediumCate' AS CateType
		FROM Basis.BIN_Product P WITH(NOLOCK)
		JOIN Basis.BIN_PrtCategory PC WITH(NOLOCK) ON PC.BIN_ProductID = P.BIN_ProductID
		JOIN Basis.BIN_PrtCatPropValue PCPV WITH(NOLOCK) ON PCPV.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
		JOIN Basis.BIN_PrtCatProperty PCP WITH(NOLOCK) ON PCP.BIN_PrtCatPropertyID = PCPV.BIN_PrtCatPropertyID

		WHERE
		P.BIN_OrganizationInfoID = #organizationInfoId#
		AND P.BIN_BrandInfoID = #brandInfoId#
		AND P.ValidFlag = 1
		AND PCP.TeminalFlag = '3'
		AND EXISTS (
		SELECT 1
		FROM Basis.BIN_ProductPriceSolutionCateDetail cateDetail WITH(NOLOCK)
		JOIN Basis.BIN_ProductPriceSolution PPS WITH(NOLOCK) ON cateDetail.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
		WHERE
		PPS.BIN_OrganizationInfoID = #organizationInfoId#
		AND PPS.BIN_BrandInfoID = #brandInfoId#
		AND PPS.BIN_ProductPriceSolutionID = #productPriceSolutionID# AND cateDetail.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
		)
		UNION
		<!-- 小分类 -->
		SELECT
		distinct PC.BIN_ProductID,'SmallCate' AS CateType
		FROM Basis.BIN_Product P WITH(NOLOCK)
		JOIN Basis.BIN_PrtCategory PC WITH(NOLOCK) ON PC.BIN_ProductID = P.BIN_ProductID
		JOIN Basis.BIN_PrtCatPropValue PCPV WITH(NOLOCK) ON PCPV.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
		JOIN Basis.BIN_PrtCatProperty PCP WITH(NOLOCK) ON PCP.BIN_PrtCatPropertyID = PCPV.BIN_PrtCatPropertyID

		WHERE
		P.BIN_OrganizationInfoID = #organizationInfoId#
		AND P.BIN_BrandInfoID = #brandInfoId#
		AND P.ValidFlag = 1
		AND PCP.TeminalFlag = '2'
		AND EXISTS (
		SELECT 1
		FROM Basis.BIN_ProductPriceSolutionCateDetail cateDetail WITH(NOLOCK)
		JOIN Basis.BIN_ProductPriceSolution PPS WITH(NOLOCK) ON cateDetail.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
		WHERE
		PPS.BIN_OrganizationInfoID = #organizationInfoId#
		AND PPS.BIN_BrandInfoID = #brandInfoId#
		AND PPS.BIN_ProductPriceSolutionID = #productPriceSolutionID# AND cateDetail.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
		)
	</sql>
	<!-- 取得产品方案明细表的产品与以前配置的差异List -->
	<select id="getPrtForPrtSoluDetailDiffYT" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		;WITH PD AS (
			<!-- 产品方案中产品分类对应的产品  -->
			SELECT
			DISTINCT P.BIN_ProductID
			FROM Basis.BIN_Product P WITH(NOLOCK)
			JOIN Basis.BIN_PrtCategory PC WITH(NOLOCK) ON PC.BIN_ProductID = P.BIN_ProductID
			WHERE
			P.BIN_OrganizationInfoID = #organizationInfoId#
			AND P.BIN_BrandInfoID = #brandInfoId#
			AND P.ValidFlag = 1
			AND EXISTS (
			SELECT 1
			FROM Basis.BIN_ProductPriceSolutionCateDetail cateDetail WITH(NOLOCK)
			JOIN Basis.BIN_ProductPriceSolution PPS WITH(NOLOCK) ON cateDetail.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
			WHERE
			PPS.BIN_OrganizationInfoID = #organizationInfoId#
			AND PPS.BIN_BrandInfoID = #brandInfoId#
			AND PPS.BIN_ProductPriceSolutionID = #productPriceSolutionID# AND cateDetail.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
			)
			UNION
			SELECT t2.BIN_ProductID
			FROM (SELECT PC1.BIN_ProductID,
			COUNT(DISTINCT PC1.CateType) gcount
			FROM ( <include refid="BINBEIFPRO03.productCategoryQuery" /> ) PC1
			GROUP BY PC1.BIN_ProductID) t2,
			(
			SELECT COUNT(DISTINCT PC2.CateType) gcount
			FROM ( <include refid="BINBEIFPRO03.productCategoryQuery" /> ) PC2
			)  t3
			WHERE t2.gcount = t3.gcount
		)
		,PDH AS (
			<!-- 产品方案中的通过产品分类添加的产品 -->
			SELECT PPSD.BIN_ProductID,PPS.IsSynchProductPrice,PPSD.SalePrice,PPSD.MemPrice
			FROM Basis.BIN_ProductPriceSolutionDetail PPSD
			JOIN Basis.BIN_ProductPriceSolution PPS ON PPSD.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
			WHERE
			PPS.BIN_OrganizationInfoID = #organizationInfoId#
			AND PPS.BIN_BrandInfoID = #brandInfoId#
			AND PPS.BIN_ProductPriceSolutionID = #productPriceSolutionID#
			AND PPSD.ValidFlag = 1
			AND PPSD.isCate IS NOT NULL
		)

		SELECT
		CASE WHEN ( prtPDH IS null and prtPD IS not null)  THEN 'add'
		WHEN ( prtPDH IS not null and prtPD IS null) THEN 'sub'
		ELSE '-' END AS 'modifyFlag' ,
		prtPD,
		prtPDH,
		(CASE WHEN T.isSynchProductPrice = '1' OR T.SalePrice IS NULL  THEN PP.SalePrice
		ELSE T.SalePrice END
		) AS salePrice,
		(CASE WHEN T.isSynchProductPrice = '1' OR T.MemPrice IS NULL THEN PP.MemPrice
		ELSE T.MemPrice END
		) AS  memPrice
		FROM
		(
		<!-- 分类中添加的产品的merge -->
		select  A.BIN_ProductID AS prtPDH,B.BIN_ProductID AS prtPD,
		case when ( A.BIN_ProductID IS null and B.BIN_ProductID IS not null) then B.BIN_ProductID
		when ( A.BIN_ProductID IS not null and B.BIN_ProductID IS null) then A.BIN_ProductID
		else B.BIN_ProductID end as productId,
		A.IsSynchProductPrice as isSynchProductPrice,
		A.SalePrice,
		A.MemPrice
		from PDH A
		left join PD B on A.BIN_ProductID = B.BIN_ProductID
		union
		<!-- 分类中减少的产品update isCate设为null -->
		select  A.BIN_ProductID AS prtPDH,B.BIN_ProductID AS prtPD,
		case when ( A.BIN_ProductID IS null and B.BIN_ProductID IS not null)  then B.BIN_ProductID
		when ( A.BIN_ProductID IS not null and B.BIN_ProductID IS null) then A.BIN_ProductID
		else B.BIN_ProductID end as productId,
		A.IsSynchProductPrice as isSynchProductPrice,
		A.SalePrice,
		A.MemPrice
		from PDH A
		right join PD B on A.BIN_ProductID = B.BIN_ProductID
		) T
		LEFT JOIN Basis.BIN_ProductPrice PP WITH(NOLOCK)
		<![CDATA[ON (PP.BIN_ProductID = T.productId AND PP.Type = '2' AND PP.EndDate >= #businessDate# AND PP.StartDate <= #businessDate#) ]]>
		WHERE (T.prtPD IS NOT NULL AND T.prtPDH IS NULL) OR (T.prtPD IS NULL AND T.prtPDH IS NOT NULL)
	</select>
   	
    <!-- 更新产品方案明细表  -->
   	<select id="mergeProductPriceSolutionDetail" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		MERGE  Basis.BIN_ProductPriceSolutionDetail AS TGT
		    USING (select #productPriceSolutionID# as productPriceSolutionID,#productId# as productId
		           ) AS SRC
		    ON TGT.BIN_ProductPriceSolutionID = SRC.productPriceSolutionID and 
			    TGT.BIN_ProductID = SRC.productId
		WHEN MATCHED THEN 
		    UPDATE SET SalePrice = #salePrice#,MemPrice = #memPrice#,Version = #tVersion# + 1,ValidFlag = #ValidFlag#,isCate = 1,
		    <include refid="BINOLCMINC99.updateSql" />
		WHEN NOT MATCHED THEN 
		    INSERT (BIN_ProductPriceSolutionID,BIN_ProductID,SalePrice,MemPrice,Version,ValidFlag,isCate,
		    		CreateTime,UpdateTime, CreatedBy, CreatePGM,UpdatedBy, UpdatePGM,ModifyCount)
		        values(#productPriceSolutionID#,#productId#,#salePrice#,#memPrice#, #tVersion# + 1,#ValidFlag#,1,
		        GETDATE(),GETDATE(),#createdBy#,#createPGM#,#updatedBy#,#updatePGM#,0)
		OUTPUT inserted.BIN_ProductPriceSolutionDetailID;
   	</select>
   	
   	<!-- 将产品方案明细表的数据无效  -->
	<update id="updPrtSoluDetail" parameterClass="java.util.HashMap">
		<![CDATA[	
			UPDATE PPSD
				SET 
				PPSD.isCate = null,
				PPSD.ValidFlag = #ValidFlag#,
				PPSD.Version = #tVersion# + 1,
				
				PPSD.UpdateTime=GETDATE(),
				PPSD.UpdatedBy=#updatedBy#,
				PPSD.UpdatePGM=#updatePGM#,
				PPSD.ModifyCount=PPSD.ModifyCount+1
		]]>
		<![CDATA[	
			FROM Basis.BIN_ProductPriceSolutionDetail PPSD
			WHERE
				PPSD.BIN_ProductPriceSolutionID = #productPriceSolutionID#
			AND PPSD.BIN_ProductID = #productId#
		]]>
	</update>
	
    <!-- 更新产品方案明细表的产品价格为最新的产品方案价格  -->
   	<select id="mergePPSDPrice" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		MERGE  Basis.BIN_ProductPriceSolutionDetail AS TGT
		    USING (
				SELECT 
					 PPS.BIN_ProductPriceSolutionID,
					 PPSD.BIN_ProductID, 
					 CONVERT(Decimal(16,2),PP.SalePrice) AS salePrice,
					 CONVERT(Decimal(16,2),PP.MemPrice) AS memPrice
				FROM Basis.BIN_ProductPriceSolutionDetail PPSD 
				JOIN Basis.BIN_ProductPriceSolution PPS ON PPSD.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
				LEFT JOIN Basis.BIN_ProductPrice PP WITH(NOLOCK) ON 
					(PP.BIN_ProductID = PPSD.BIN_ProductID  AND PP.Type = '2' <![CDATA[AND PP.EndDate >= #priceDate# AND PP.StartDate <= #priceDate#]]>)
				WHERE 
						PPS.BIN_OrganizationInfoID = #organizationInfoId#
				AND PPS.BIN_BrandInfoID = #brandInfoId#
		     ) AS SRC
		    ON TGT.BIN_ProductPriceSolutionID = SRC.BIN_ProductPriceSolutionID AND TGT.BIN_ProductID = SRC.BIN_ProductID
			    
		WHEN MATCHED AND (<![CDATA[TGT.SalePrice <> SRC.salePrice OR TGT.MemPrice <> SRC.memPrice]]>) THEN 
		    UPDATE SET SalePrice = SRC.salePrice,MemPrice = SRC.memPrice,Version = #tVersion# + 1 ,
		  <include refid="BINOLCMINC99.updateSql" />
		
		OUTPUT inserted.BIN_ProductPriceSolutionDetailID;
   	</select>


	<!-- 更新产品方案明细表的产品价格为最新的产品方案价格  -->
	<select id="mergePPSDPriceYT" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		MERGE  Basis.BIN_ProductPriceSolutionDetail AS TGT
		USING (
			SELECT
				PPS.BIN_ProductPriceSolutionID,
				PPSD.BIN_ProductID,
				CONVERT(Decimal(16,2),(CASE WHEN PPS.isSynchProductPrice = '1' OR PPSD.SalePrice IS NULL  THEN PP.SalePrice
				ELSE PPSD.SalePrice END
				)) AS salePrice,
				CONVERT(Decimal(16,2),(CASE WHEN PPS.isSynchProductPrice = '1' OR PPSD.MemPrice IS NULL THEN PP.MemPrice
				ELSE PPSD.MemPrice END
				)) AS  memPrice
			FROM Basis.BIN_ProductPriceSolutionDetail PPSD
			JOIN Basis.BIN_ProductPriceSolution PPS ON PPSD.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
			LEFT JOIN Basis.BIN_ProductPrice PP WITH(NOLOCK) ON
				(PP.BIN_ProductID = PPSD.BIN_ProductID  AND PP.Type = '2' <![CDATA[AND PP.EndDate >= #priceDate# AND PP.StartDate <= #priceDate#]]>)
			WHERE
				PPS.BIN_OrganizationInfoID = #organizationInfoId#
				AND PPS.BIN_BrandInfoID = #brandInfoId#
		) AS SRC
		ON TGT.BIN_ProductPriceSolutionID = SRC.BIN_ProductPriceSolutionID AND TGT.BIN_ProductID = SRC.BIN_ProductID
		WHEN MATCHED AND (<![CDATA[TGT.SalePrice <> SRC.salePrice OR TGT.MemPrice <> SRC.memPrice]]>) THEN
		UPDATE SET SalePrice = SRC.salePrice,MemPrice = SRC.memPrice,Version = #tVersion# + 1,
		<include refid="BINOLCMINC99.updateSql" />
		OUTPUT inserted.BIN_ProductPriceSolutionDetailID;
	</select>
    
</sqlMap>
