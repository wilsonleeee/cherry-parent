<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5"
 metadata-complete="true">
  <!-- 配置文件的路径 读取properties文件-->
   <listener>
   <listener-class>com.cherry.cm.core.WebConfigListener</listener-class>
  </listener>
    <context-param>
    <param-name>cherryconf</param-name>
    <param-value>classpath:conf/properties/cherry.properties</param-value>
  </context-param>
   <context-param>
    <param-name>DBSchemaVersion</param-name>
    <param-value>classpath:conf/properties/DBSchemaVersion.properties</param-value>
  </context-param>

    <listener>
        <listener-class>com.dianping.cat.servlet.CatListener</listener-class>
    </listener>

    <listener>
		<listener-class>com.cherry.cm.util.LogbackConfigListener</listener-class>
	</listener>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <display-name>Cherry</display-name>

    <filter>
        <filter-name>cat-filter</filter-name>
        <filter-class>com.dianping.cat.servlet.CatFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>cat-filter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

  <filter>
    <filter-name>CherrySecurityAuthFilter</filter-name>
    <filter-class>com.cherry.cm.core.CherrySecurityAuthFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>CherrySecurityAuthFilter</filter-name>
    <url-pattern>/gadgets/*</url-pattern>
    <url-pattern>/social/*</url-pattern>
    <url-pattern>/rpc/*</url-pattern>
    <url-pattern>/rest/*</url-pattern>
    <url-pattern>/xpc*</url-pattern>
  </filter-mapping>
	
 <filter>
    <filter-name>CherryCustomDataSource</filter-name>
    <filter-class>com.cherry.cm.core.CustomerSessionFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>CherryCustomDataSource</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  
   <filter>
    <filter-name>struts2</filter-name>
    <filter-class>com.cherry.cm.core.CherryFilterDispatcher</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>struts2</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <context-param> 
		<param-name>contextConfigLocation</param-name> 
		<param-value>
            classpath:config/spring/common/appcontext-ds-monitor.xml
            classpath:conf/spring-conf/applicationContext.xml
            classpath:conf/spring-conf/beans-define/beans-*.xml
		</param-value>
  </context-param> 

  
   
   
   <!-- cherryLogger用  DEBUG INFO ACCESS WARNING ERROR NONE
   <listener>
   		<listener-class>com.cherry.common.core.CherryLogger</listener-class>
   </listener>  
   <context-param>
    <param-name>cherryLogLevel</param-name>
    <param-value>INFO</param-value>
  </context-param>
  -->
  <!-- 
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
    <context-param>
    <param-name>log4jConfigLocation</param-name>
    	<param-value>classpath:/conf/properties/log4j.properties</param-value>
   </context-param>
   <context-param>
    <param-name>log4jRefreshInterval</param-name>
    <param-value>60000</param-value>
  </context-param>
   -->
   <!-- Logback配置 -->
 	<context-param>
		<param-name>logbackConfigLocation</param-name>
		<param-value>classpath:conf/properties/logback.xml</param-value>
	</context-param>

	<!-- Optional: make context path available in logback config with ${contextPath} -->
	<context-param>
		<param-name>logbackConfigContextPathKey</param-name>
		<param-value>contextPath</param-value>
	</context-param>


  <!--
  Syntax: <key>=<value> separated by a newline

  system.properties specifies the environmental variables that will be set to the JVM System Properties at server startup time.
  Alternatively, you may add these values in your app server (ex: Tomcat) as
  VM arguments like this: -Dshindig.host="my.production.shindig.server.com".

  Here are a few properties that can be set for Shindig:
  shindig.host: the server name that Shindig is deployed and running on
  shindig.port: the port number of shindig.host server

  Make sure you escape all HTML values for the web.xml to be parsed correctly.
  -->


  <!-- 
  <filter>
      <filter-name>ShiroFilter</filter-name>
      <filter-class>org.apache.shiro.web.servlet.IniShiroFilter</filter-class>
      <init-param>
          <param-name>config</param-name>
          <param-value>
              # The ShiroFilter configuration is very powerful and flexible, while still remaining succinct.
              # Please read the comprehensive example, with full comments and explanations, in the JavaDoc:
              #
              # http://www.jsecurity.org/api/org/jsecurity/web/servlet/JSecurityFilter.html
              [main]
              shindigSampleRealm = com.cherry.shindig.gadgets.shiro.SampleShiroRealm
              securityManager.realm = $shindigSampleRealm
              authc.loginUrl = /login.jsp

              [urls]
              # The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
              # the 'authc' filter must still be specified for it so it can process that url's
              # login submissions. It is 'smart' enough to allow those requests through as specified by the
              # shiro.loginUrl above.
              /login.jsp = authc

              /oauth/authorize/** = authc

          </param-value>
      </init-param>
  </filter>
   -->



  <!--<servlet-mapping>
    <servlet-name>concat</servlet-name>
    <url-pattern>/gadgets/concat</url-pattern>
  </servlet-mapping>-->

  <!--<servlet-mapping>
    <servlet-name>oauthCallback</servlet-name>
    <url-pattern>/gadgets/oauthcallback</url-pattern>
  </servlet-mapping>-->


  <!--  
  <servlet-mapping>
    <servlet-name>sampleOAuth</servlet-name>
    <url-pattern>/oauth/*</url-pattern>
  </servlet-mapping>
  -->

  <!--<servlet-mapping>
    <servlet-name>rpcSwf</servlet-name>
    <url-pattern>/xpc*</url-pattern>
  </servlet-mapping>-->
  
  <!-- 
  <servlet>
        <description>AtmosphereServlet</description>
        <servlet-name>AtmosphereServlet</servlet-name>
        <servlet-class>org.atmosphere.cpr.AtmosphereServlet</servlet-class>
        <init-param>
            <param-name>com.sun.jersey.config.property.packages</param-name>
            <param-value>com.cherry.mq.mes.atmosphere</param-value>
        </init-param>
        <init-param>
            <param-name>org.atmosphere.useWebSocket</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
         	 <param-name>org.atmosphere.websocket.maxIdleTime</param-name>
         	 <param-value>1800000 </param-value>
		</init-param>
        <init-param>
            <param-name>org.atmosphere.useNative</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param> 
 			<param-name>org.atmosphere.cpr.broadcasterLifeCyclePolicy</param-name> 
  			<param-value>EMPTY_DESTROY</param-value> 
		</init-param>
        <init-param>
            <param-name>org.atmosphere.cpr.broadcastFilterClasses</param-name>
            <param-value>com.cherry.mq.mes.atmosphere.JQueryPubSubFilter</param-value>
        </init-param>
        <load-on-startup>0</load-on-startup>
  </servlet>
  <servlet-mapping>
      <servlet-name>AtmosphereServlet</servlet-name>
      <url-pattern>/pubsub/*</url-pattern>
  </servlet-mapping>
   -->

 <servlet>
 	<servlet-name>CodeTableServlet</servlet-name>
	<servlet-class>com.cherry.cm.core.CodeTableServlet</servlet-class>
	<load-on-startup>1</load-on-startup>
 </servlet>
 <servlet>
 	<servlet-name>DBVersionServlet</servlet-name>
	<servlet-class>com.cherry.cm.core.DBVersionServlet</servlet-class>
	<load-on-startup>1</load-on-startup>
 </servlet>
  <servlet>
 	<servlet-name>CherrySecretServlet</servlet-name>
	<servlet-class>com.cherry.cm.core.CherrySecretServlet</servlet-class>
	<load-on-startup>1</load-on-startup>
 </servlet>
 <!-- freemarker struts2标签支持  -->
  <servlet>
  	<servlet-name>JSPSupportServlet</servlet-name>
  	<servlet-class>org.apache.struts2.views.JspSupportServlet</servlet-class>
  	<load-on-startup>1</load-on-startup>
 </servlet>
   <welcome-file-list>
    <welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
   <!-- 自定义标签  -->
  <jsp-config>
        <taglib>
            <taglib-uri>/cherry-tags</taglib-uri>
            <taglib-location>/WEB-INF/cherrytld/cherrytags.tld</taglib-location>
        </taglib>		
    </jsp-config>
<error-page> 
<error-code>404</error-code> 
<location>/WEB-INF/jsp/common/error.jsp</location> 
</error-page> 

<session-config>
	<session-timeout>60</session-timeout>   
</session-config>

    <servlet>
		<servlet-name>JerseyServlet</servlet-name>
		<servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</servlet-class>
	</servlet>	
    <servlet-mapping>
        <servlet-name>JerseyServlet</servlet-name>
        <url-pattern>/webservice/*</url-pattern>
    </servlet-mapping>
    
    <servlet-mapping> 
       <servlet-name>default</servlet-name> 
       <url-pattern>*.gif</url-pattern> 
    </servlet-mapping> 
          
    <servlet-mapping> 
        <servlet-name>default</servlet-name> 
        <url-pattern>*.jpg</url-pattern> 
    </servlet-mapping> 
          
    <servlet-mapping> 
        <servlet-name>default</servlet-name> 
        <url-pattern>*.js</url-pattern> 
    </servlet-mapping> 
       
    <servlet-mapping> 
        <servlet-name>default</servlet-name> 
        <url-pattern>*.png</url-pattern> 
    </servlet-mapping> 
    
     <servlet-mapping> 
        <servlet-name>default</servlet-name> 
        <url-pattern>*.css</url-pattern> 
    </servlet-mapping> 
    
    
  <!-- 
  <security-constraint>
    <web-resource-collection>
      <web-resource-name>Everything in the webapp</web-resource-name>
      <url-pattern>/init</url-pattern>
      <url-pattern>/init.action</url-pattern>
      <url-pattern>/login.action</url-pattern>
      <url-pattern>/logout.action</url-pattern>
      <url-pattern>/getCheckImage.action</url-pattern>
      <url-pattern>/initialTop.action</url-pattern>
      <url-pattern>/TopGetTaskList.action</url-pattern>
      <url-pattern>/SHOWPROCESSIMAGEPAGE.action</url-pattern>
      <url-pattern>/GETIMAGEFILE.action</url-pattern>
      <url-pattern>/TODOPROCESSINSTANCE.action</url-pattern>
      <url-pattern>/lg/*</url-pattern>
      <url-pattern>/basis/*</url-pattern>
      <url-pattern>/common/*</url-pattern>
      <url-pattern>/cp/*</url-pattern>
      <url-pattern>/ct/*</url-pattern>
      <url-pattern>/jn/*</url-pattern>
      <url-pattern>/mb/*</url-pattern>
      <url-pattern>/mo/*</url-pattern>
      <url-pattern>/pl/*</url-pattern>
      <url-pattern>/pt/*</url-pattern>
      <url-pattern>/rp/*</url-pattern>
      <url-pattern>/ss/*</url-pattern>
      <url-pattern>/st/*</url-pattern>
      <url-pattern>/social/*</url-pattern>
      <url-pattern>/pubsub/*</url-pattern>
    </web-resource-collection>
    <user-data-constraint>
      <transport-guarantee>CONFIDENTIAL</transport-guarantee>
    </user-data-constraint>
  </security-constraint>
   -->
</web-app>
