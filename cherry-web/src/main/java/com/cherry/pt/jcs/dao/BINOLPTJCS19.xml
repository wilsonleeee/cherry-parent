<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="BINOLPTJCS19">
	<select id="getSolutionInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<![CDATA[
		SELECT 
			BIN_ProductPriceSolutionID as productPriceSolutionID,
			SolutionName AS solutionName,
			SolutionCode AS solutionCode,
			convert(varchar(30),StartDate,120) AS startDate,
			convert(varchar(30),EndDate,120) AS endDate,
			convert(varchar(30),StartDate,23) AS startDateYMD,
			convert(varchar(30),EndDate,23) AS endDateYMD,
			Comments AS comments,
		    convert(varchar(30),UpdateTime,121) AS soluUpdateTime,
        	ModifyCount AS soluModifyCount
		FROM 
			Basis.BIN_ProductPriceSolution
		WHERE
			BIN_ProductPriceSolutionID=#productPriceSolutionID#
		]]>
	</select>
	<!-- 方案明细 -->
	<sql id="solutionDetailQuery">
		SELECT 
			PPSD.BIN_ProductPriceSolutionDetailID,
			PPSD.BIN_ProductID,
			PPSD.isCate,
			PPSD.BIN_ProductPriceSolutionID,
			<dynamic>
				<isNotEmpty property="language">
					<isEqual property="language" compareValue="zh_CN">										
						P.NameTotal AS nameTotal,
					</isEqual>
					<isEqual property="language" compareValue="en_US">										
						P.NameForeign AS nameTotal,
					</isEqual>
				</isNotEmpty>
				<isEmpty property="language">
						P.NameTotal AS nameTotal,
				</isEmpty>
			</dynamic>
			PPSD.SoluProductName AS soluProductName,
			P.OriginalBrand AS originalBrand,
			P.ValidFlag AS prtValidFlag,
			P.UnitCode AS unitCode,
			PV.BarCode AS barCode,
			PriceJson,
			ISNULL(CONVERT(Decimal(16,2),PPSD.SalePrice),0) AS salePrice,
			ISNULL(CONVERT(Decimal(16,2),PPSD.MemPrice),0) AS memPrice,
			convert(varchar(30),PPSD.UpdateTime,121) AS updateTime,
			PPSD.ModifyCount AS modifyCount
		FROM 
			Basis.BIN_ProductPriceSolutionDetail PPSD WITH(NOLOCK)
		JOIN Basis.BIN_Product P WITH(NOLOCK) ON P.BIN_ProductID = PPSD.BIN_ProductID
		JOIN Basis.BIN_ProductVendor PV WITH(NOLOCK) ON PV.BIN_ProductID = P.BIN_ProductID
		WHERE 
			PPSD.BIN_ProductPriceSolutionID = #productPriceSolutionID#
		AND PPSD.ValidFlag = '1'
		<isNotEmpty property="productID" prepend="AND">
			PPSD.BIN_ProductID = #productID#
		</isNotEmpty>
	</sql>
	
	<!-- 取得方案总数  -->
    <select id="getSolutionInfoDetailCount" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
    	<![CDATA[
			SELECT	COUNT(SORT_T1.BIN_ProductPriceSolutionID) AS count FROM (
		]]>	
		<include refid="BINOLPTJCS19.solutionDetailQuery" />	
		<![CDATA[	
			)SORT_T1
		]]>										
    </select>
	
    <select id="getSolutionInfoDetailList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
       	<include refid="BINOLCMINC99.pageheader" />
		<include refid="BINOLPTJCS19.solutionDetailQuery" />
		<include refid="BINOLCMINC99.pagefooter" />
    </select>
    
    <!--****************************** 产品方案明细分类相关SQL ******************************-->
    <!-- 方案明细添加产品分类 -->
   	<insert id="insertCate" parameterClass="java.util.HashMap">
		<selectKey resultClass="java.lang.Integer" type="post" keyProperty="BIN_ProductPriceSolutionCateDetailID" >
			INSERT INTO Basis.BIN_ProductPriceSolutionCateDetail(	
				BIN_ProductPriceSolutionID,
				BIN_PrtCatPropertyID,
				BIN_PrtCatPropValueID,
			<include refid="BINOLCMINC99.insertKeySql" />	
			)VALUES(
				#productPriceSolutionID#,
				#propId#,
				#propValId#,
			<include refid="BINOLCMINC99.insertValueSql" />
			)
			select SCOPE_IDENTITY() as value
		</selectKey>
		
    </insert>
    
    <!-- 取得产品方案明细表的产品与以前配置的差异List -->
   	<select id="getPrtForPrtSoluDetailDiff" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
   		<isEqual property="soluAddModeConf" compareValue="2">
		 ;WITH PD AS (
			<!-- 产品方案中产品分类对应的产品  -->
			SELECT 
				DISTINCT P.BIN_ProductID 
			FROM Basis.BIN_Product P WITH(NOLOCK) 
			JOIN Basis.BIN_PrtCategory PC WITH(NOLOCK) ON PC.BIN_ProductID = P.BIN_ProductID
			WHERE 
				P.BIN_OrganizationInfoID = #organizationInfoId#
			AND P.BIN_BrandInfoID = #brandInfoId#
			AND P.ValidFlag = 1
			AND EXISTS (
				SELECT 1 
				FROM Basis.BIN_ProductPriceSolutionCateDetail cateDetail WITH(NOLOCK) 
				JOIN Basis.BIN_ProductPriceSolution PPS WITH(NOLOCK) ON cateDetail.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
				WHERE 
					PPS.BIN_OrganizationInfoID = #organizationInfoId#
				AND PPS.BIN_BrandInfoID = #brandInfoId#
				AND PPS.BIN_ProductPriceSolutionID = #productPriceSolutionID# AND cateDetail.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
			)
		)	
		</isEqual>
   		<isEqual property="soluAddModeConf" compareValue="3">
			;WITH PC AS (
			    <!-- 大分类 -->
				SELECT 
					 distinct PC.BIN_ProductID,'LargeCate' AS CateType
				FROM Basis.BIN_Product P WITH(NOLOCK) 
				JOIN Basis.BIN_PrtCategory PC WITH(NOLOCK) ON PC.BIN_ProductID = P.BIN_ProductID
				JOIN Basis.BIN_PrtCatPropValue PCPV WITH(NOLOCK) ON PCPV.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
				JOIN Basis.BIN_PrtCatProperty PCP WITH(NOLOCK) ON PCP.BIN_PrtCatPropertyID = PCPV.BIN_PrtCatPropertyID
				
				WHERE 
					P.BIN_OrganizationInfoID = #organizationInfoId#
				AND P.BIN_BrandInfoID = #brandInfoId#
				AND P.ValidFlag = 1
				AND PCP.TeminalFlag = '1'
				AND EXISTS (
					SELECT 1 
					FROM Basis.BIN_ProductPriceSolutionCateDetail cateDetail WITH(NOLOCK) 
					JOIN Basis.BIN_ProductPriceSolution PPS WITH(NOLOCK) ON cateDetail.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
					WHERE 
						PPS.BIN_OrganizationInfoID = #organizationInfoId#
					AND PPS.BIN_BrandInfoID = #brandInfoId#
					AND PPS.BIN_ProductPriceSolutionID = #productPriceSolutionID# AND cateDetail.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
				)
				UNION
				<!-- 中分类 -->
				SELECT 
					 distinct PC.BIN_ProductID,'MediumCate' AS CateType
				FROM Basis.BIN_Product P WITH(NOLOCK) 
				JOIN Basis.BIN_PrtCategory PC WITH(NOLOCK) ON PC.BIN_ProductID = P.BIN_ProductID
				JOIN Basis.BIN_PrtCatPropValue PCPV WITH(NOLOCK) ON PCPV.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
				JOIN Basis.BIN_PrtCatProperty PCP WITH(NOLOCK) ON PCP.BIN_PrtCatPropertyID = PCPV.BIN_PrtCatPropertyID
				
				WHERE 
					P.BIN_OrganizationInfoID = #organizationInfoId#
				AND P.BIN_BrandInfoID = #brandInfoId#
				AND P.ValidFlag = 1
				AND PCP.TeminalFlag = '3'
				AND EXISTS (
					SELECT 1 
					FROM Basis.BIN_ProductPriceSolutionCateDetail cateDetail WITH(NOLOCK) 
					JOIN Basis.BIN_ProductPriceSolution PPS WITH(NOLOCK) ON cateDetail.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
					WHERE 
						PPS.BIN_OrganizationInfoID = #organizationInfoId#
					AND PPS.BIN_BrandInfoID = #brandInfoId#
					AND PPS.BIN_ProductPriceSolutionID = #productPriceSolutionID# AND cateDetail.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
				)
				UNION
				<!-- 小分类 -->
				SELECT 
					 distinct PC.BIN_ProductID,'SmallCate' AS CateType
				FROM Basis.BIN_Product P WITH(NOLOCK) 
				JOIN Basis.BIN_PrtCategory PC WITH(NOLOCK) ON PC.BIN_ProductID = P.BIN_ProductID
				JOIN Basis.BIN_PrtCatPropValue PCPV WITH(NOLOCK) ON PCPV.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
				JOIN Basis.BIN_PrtCatProperty PCP WITH(NOLOCK) ON PCP.BIN_PrtCatPropertyID = PCPV.BIN_PrtCatPropertyID
				
				WHERE 
					P.BIN_OrganizationInfoID = #organizationInfoId#
				AND P.BIN_BrandInfoID = #brandInfoId#
				AND P.ValidFlag = 1
				AND PCP.TeminalFlag = '2'
				AND EXISTS (
					SELECT 1 
					FROM Basis.BIN_ProductPriceSolutionCateDetail cateDetail WITH(NOLOCK) 
					JOIN Basis.BIN_ProductPriceSolution PPS WITH(NOLOCK) ON cateDetail.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
					WHERE 
						PPS.BIN_OrganizationInfoID = #organizationInfoId#
					AND PPS.BIN_BrandInfoID = #brandInfoId#
					AND PPS.BIN_ProductPriceSolutionID = #productPriceSolutionID# AND cateDetail.BIN_PrtCatPropValueID = PC.BIN_PrtCatPropValueID
				)
			),
			t2 AS (
			    SELECT BIN_ProductID,
			           COUNT(DISTINCT CateType) gcount
			      FROM PC
			  GROUP BY BIN_ProductID
			)
			,t3 AS (
			    SELECT COUNT(DISTINCT CateType) gcount
			      FROM PC
			)
			,PD AS (
			SELECT t2.BIN_ProductID
			  FROM t2, t3
			 WHERE t2.gcount = t3.gcount
			)
		</isEqual>
		,PDH AS (
			<!-- 产品方案中的通过产品分类添加的产品 -->
			SELECT PPSD.BIN_ProductID
			FROM Basis.BIN_ProductPriceSolutionDetail PPSD 
			JOIN Basis.BIN_ProductPriceSolution PPS ON PPSD.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
			WHERE 
				PPS.BIN_OrganizationInfoID = #organizationInfoId#
			AND PPS.BIN_BrandInfoID = #brandInfoId#
			AND PPS.BIN_ProductPriceSolutionID = #productPriceSolutionID# 
			AND PPSD.ValidFlag = 1
			AND PPSD.isCate IS NOT NULL
		)
		
		SELECT
			 CASE WHEN ( prtPDH IS null and prtPD IS not null)  THEN 'add' 
		     	  WHEN ( prtPDH IS not null and prtPD IS null) THEN 'sub'
		     	  ELSE '-' END AS 'modifyFlag' ,
	     	  prtPD,
	     	  prtPDH,
	     	  PP.SalePrice AS salePrice,
	     	  PP.MemPrice AS memPrice
		FROM
		(
		<!-- 分类中添加的产品的merge -->
		select  A.BIN_ProductID AS prtPDH,B.BIN_ProductID AS prtPD,
				case when ( A.BIN_ProductID IS null and B.BIN_ProductID IS not null) then B.BIN_ProductID 
				when ( A.BIN_ProductID IS not null and B.BIN_ProductID IS null) then A.BIN_ProductID
				else B.BIN_ProductID end as productId
		from PDH A 
		left join PD B on A.BIN_ProductID = B.BIN_ProductID
		union
		<!-- 分类中减少的产品update isCate设为null -->
		select  A.BIN_ProductID AS prtPDH,B.BIN_ProductID AS prtPD,
				case when ( A.BIN_ProductID IS null and B.BIN_ProductID IS not null)  then B.BIN_ProductID 
		 		when ( A.BIN_ProductID IS not null and B.BIN_ProductID IS null) then A.BIN_ProductID
				else B.BIN_ProductID end as productId
		from PDH A 
		right join PD B on A.BIN_ProductID = B.BIN_ProductID	
		) T
		LEFT JOIN Basis.BIN_ProductPrice PP WITH(NOLOCK) 
			<![CDATA[ON (PP.BIN_ProductID = T.productId AND PP.Type = '2' AND PP.EndDate >= #businessDate# AND PP.StartDate <= #businessDate#) ]]>
		WHERE (T.prtPD IS NOT NULL AND T.prtPDH IS NULL) OR (T.prtPD IS NULL AND T.prtPDH IS NOT NULL)
   	</select>
   	
    <!-- 更新产品方案明细表  -->
   	<select id="mergeProductPriceSolutionDetail" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		MERGE  Basis.BIN_ProductPriceSolutionDetail AS TGT
		    USING (select #productPriceSolutionID# as productPriceSolutionID,#productId# as productId
		           ) AS SRC
		    ON TGT.BIN_ProductPriceSolutionID = SRC.productPriceSolutionID and 
			    TGT.BIN_ProductID = SRC.productId
		WHEN MATCHED THEN 
		    UPDATE SET SalePrice = #salePrice#,MemPrice = #memPrice#,Version = #tVersion# + 1,ValidFlag = #ValidFlag#,isCate = 1,
		    <include refid="BINOLCMINC99.updateSql" />
		WHEN NOT MATCHED THEN 
		    INSERT (BIN_ProductPriceSolutionID,BIN_ProductID,SalePrice,MemPrice,Version,ValidFlag,isCate,
		    		CreateTime,UpdateTime, CreatedBy, CreatePGM,UpdatedBy, UpdatePGM,ModifyCount)
		        values(#productPriceSolutionID#,#productId#,#salePrice#,#memPrice#, #tVersion# + 1,#ValidFlag#,1,
		        GETDATE(),GETDATE(),#createdBy#,#createPGM#,#updatedBy#,#updatePGM#,0)
		OUTPUT inserted.BIN_ProductPriceSolutionDetailID;
   	</select>
   	
   	<!-- 将产品方案明细表的数据无效  -->
	<update id="updPrtSoluDetail" parameterClass="java.util.HashMap">
		<![CDATA[	
			UPDATE PPSD
				SET 
				PPSD.isCate = null,
				PPSD.ValidFlag = #ValidFlag#,
				PPSD.Version = #tVersion# + 1,
				
				PPSD.UpdateTime=GETDATE(),
				PPSD.UpdatedBy=#updatedBy#,
				PPSD.UpdatePGM=#updatePGM#,
				PPSD.ModifyCount=PPSD.ModifyCount+1
		]]>
		<![CDATA[	
			FROM Basis.BIN_ProductPriceSolutionDetail PPSD
			WHERE
				PPSD.BIN_ProductPriceSolutionID = #productPriceSolutionID#
			AND PPSD.BIN_ProductID = #productId#
		]]>
	</update>
	<!-- 删除产品方案分类  -->
	<delete id="delPrtSoluDetailCate" parameterClass="java.util.HashMap">
		<![CDATA[
		DELETE FROM
			Basis.BIN_ProductPriceSolutionCateDetail
		WHERE
			BIN_ProductPriceSolutionID = #productPriceSolutionID#
		]]>
	</delete>
	
	<!-- 获取产品分类List -->
	<select id="getCateList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		<![CDATA[
		SELECT
			A.BIN_PrtCatPropValueID AS propValId,
			B.BIN_PrtCatPropertyID AS propId,
			C.TeminalFlag AS teminalFlag
		]]>
		<dynamic>
		<isNotEmpty property="language">
			<isEqual property="language" compareValue="en_US">
			,B.PropValueForeign AS propValName
			,C.PropertyNameForeign AS propName
			</isEqual>
			<isEqual property="language" compareValue="zh_CN">	
			,B.PropValueChinese AS propValName
			,C.PropertyNameChinese AS propName
			</isEqual>								
		</isNotEmpty>
		<isEmpty property="language">
			,B.PropValueChinese AS propValName
			,C.PropertyNameChinese AS propName
		</isEmpty>
		</dynamic>
		<![CDATA[	
		FROM
			Basis.BIN_ProductPriceSolutionCateDetail A
			JOIN Basis.BIN_PrtCatPropValue B ON(A.BIN_PrtCatPropValueID = B.BIN_PrtCatPropValueID AND B.ValidFlag = '1')
			JOIN Basis.BIN_PrtCatProperty C ON(B.BIN_PrtCatPropertyID = C.BIN_PrtCatPropertyID AND C.ValidFlag = '1')
		WHERE
			A.BIN_ProductPriceSolutionID = #productPriceSolutionID#
		ORDER BY
			C.ViewSeq
		]]>
	</select>
	
    <!-- 更新产品方案明细表的产品价格为最新的产品方案价格  -->
   	<select id="mergePPSDPrice" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		MERGE  Basis.BIN_ProductPriceSolutionDetail AS TGT
		    USING (
				SELECT 
					 PPS.BIN_ProductPriceSolutionID,
					 PPSD.BIN_ProductID, 
					 CONVERT(Decimal(16,2),PP.SalePrice) AS salePrice,
					 CONVERT(Decimal(16,2),PP.MemPrice) AS memPrice
				FROM Basis.BIN_ProductPriceSolutionDetail PPSD 
				JOIN Basis.BIN_ProductPriceSolution PPS ON PPSD.BIN_ProductPriceSolutionID = PPS.BIN_ProductPriceSolutionID
				LEFT JOIN Basis.BIN_ProductPrice PP WITH(NOLOCK) ON 
					(PP.BIN_ProductID = PPSD.BIN_ProductID  AND PP.Type = '2' <![CDATA[AND PP.EndDate >= #priceDate# AND PP.StartDate <= #priceDate#]]>)
				WHERE 
						PPS.BIN_OrganizationInfoID = #organizationInfoId#
				AND PPS.BIN_BrandInfoID = #brandInfoId#
		     ) AS SRC
		    ON TGT.BIN_ProductPriceSolutionID = SRC.BIN_ProductPriceSolutionID AND TGT.BIN_ProductID = SRC.BIN_ProductID
			    
		WHEN MATCHED AND (<![CDATA[TGT.SalePrice <> SRC.salePrice OR TGT.MemPrice <> SRC.memPrice]]>) THEN 
		    UPDATE SET SalePrice = SRC.salePrice,MemPrice = SRC.memPrice,Version = #tVersion# + 1, 
		  <include refid="BINOLCMINC99.updateSql" />
		
		OUTPUT inserted.BIN_ProductPriceSolutionDetailID;
   	</select>
</sqlMap>