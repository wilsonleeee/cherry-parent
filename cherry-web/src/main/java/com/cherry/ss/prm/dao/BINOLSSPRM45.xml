<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="BINOLSSPRM45">
	<sql id="commTakingQuery">
		<![CDATA[
        SELECT
            CADETAIL2.BIN_BrandInfoID,
            CADETAIL2.BIN_EmployeeID,
            CADETAIL2.BIN_OrganizationID,
            CADETAIL2.BIN_InventoryInfoID AS inventoryInfoId,
            CADETAIL2.BIN_PromotionStockTakingID AS stockTakingId,
            CADETAIL2.StockTakingNoIF AS stockTakingNo,
            CADETAIL2.StockTakingDate AS stockTakingDate,
            CADETAIL2.VerifiedFlag AS verifiedFlag,
            CADETAIL2.Type AS takingType,
            CADETAIL2.Reason,
            CADETAIL2.CreateTime,
            ISNULL(SUM(CONVERT(BIGINT,ISNULL(CADETAIL2.BookQuantity,0))),0) AS Quantity,
            ISNULL(SUM(CONVERT(BIGINT,ISNULL(CADETAIL2.BookQuantity,0)) + CONVERT(BIGINT,ISNULL(CADETAIL2.GainQuantity,0))),0) AS realQuantity,
            ISNULL(SUM(CONVERT(BIGINT,ISNULL(CADETAIL2.GainQuantity,0))),0) AS summQuantity,
            ISNULL(SUM(CADETAIL2.Amount),0) AS summAmount,
            ISNULL(SUM(CASE WHEN (ISNULL(CADetail2.GainQuantity,0)) >= 0 THEN 0 ELSE CONVERT(BIGINT,(ISNULL(CADETAIL2.GainQuantity,0))) END),0) AS ShortQuantity,
            ISNULL(SUM(CASE WHEN (ISNULL(CADetail2.GainQuantity,0)) < 0 THEN 0 ELSE CONVERT(BIGINT,(ISNULL(CADETAIL2.GainQuantity,0))) END),0) AS OverQuantity
        FROM(
            SELECT
                CADETAIL1.BIN_BrandInfoID,
                CADETAIL1.BIN_EmployeeID,
                CADETAIL1.BIN_OrganizationID,
                CADETAIL1.BIN_InventoryInfoID,
                CADETAIL1.BIN_PromotionStockTakingID,
                CADETAIL1.StockTakingNoIF,
                CADETAIL1.StockTakingDate,
                CADETAIL1.VerifiedFlag,
                CADETAIL1.Type,
                CADETAIL1.Reason,
                CADETAIL1.CreateTime,
                ISNULL(SUM(CONVERT(BIGINT,CADETAIL1.BookQuantity)),0) AS BookQuantity,
                ISNULL(SUM(CONVERT(BIGINT,CADETAIL1.RealQuantity)),0) AS RealQuantity,
                ISNULL(SUM(CADETAIL1.RealAmount),0)-ISNULL(SUM(CADETAIL1.BookAmount),0) AS Amount,
                ISNULL(SUM(CONVERT(BIGINT,CADETAIL1.RealQuantity)),0) - ISNULL(SUM(CONVERT(BIGINT,CADETAIL1.BookQuantity)),0) AS GainQuantity
            FROM(
                SELECT
                    A.BIN_BrandInfoID,
                    A.BIN_EmployeeID,
                    A.BIN_OrganizationID,
                    B.BIN_InventoryInfoID,
                    A.BIN_PromotionStockTakingID,
                    A.StockTakingNoIF,
                    A.StockTakingDate,
                    A.VerifiedFlag,
                    A.Type,
                    A.Reason,
                    A.CreateTime,
                    CASE WHEN J.IsStock='1' THEN ISNULL(B.Quantity,0) ELSE 0 END AS BookQuantity,
                    CASE WHEN J.IsStock='1' THEN ISNULL(B.Quantity,0) ELSE 0 END +  CASE WHEN J.IsStock='1' THEN ISNULL(B.GainQuantity,0) ELSE 0 END AS RealQuantity,
                    CASE WHEN J.IsStock='1' THEN ISNULL(B.Quantity,0) ELSE 0 END * ISNULL(B.Price,0) AS BookAmount,
                    (CASE WHEN J.IsStock='1' THEN  ISNULL(B.Quantity,0) ELSE 0 END + CASE WHEN J.IsStock='1' THEN ISNULL(B.GainQuantity,0) ELSE 0 END) * ISNULL(B.Price,0) AS RealAmount,
                    B.BIN_PromotionProductVendorID,
                    J.UnitCode,
                    C.BarCode,
                    ISNULL (L.BIN_GroupID, B.BIN_PromotionProductVendorID) AS BIN_GroupID
      		FROM
				Inventory.BIN_PromotionStockTaking A  WITH(NOLOCK)
				JOIN Inventory.BIN_PromotionTakingDetail B WITH(NOLOCK)
				ON(A.BIN_PromotionStockTakingID = B.BIN_PromotionStockTakingID)
				JOIN Basis.BIN_PromotionProductVendor C WITH(NOLOCK)
				ON(B.BIN_PromotionProductVendorID = C.BIN_PromotionProductVendorID)
				LEFT JOIN Basis.BIN_PromotionProduct J WITH(NOLOCK)
				ON(J.BIN_PromotionProductID = C.BIN_PromotionProductID)
				LEFT JOIN Basis.BIN_PromotionPrtType K WITH(NOLOCK)
				ON (J.BIN_PromotionPrtTypeID = K.BIN_PromotionPrtTypeID)
				LEFT JOIN Basis.BIN_Conjunction L ON L.BIN_ProductVendorID = B.BIN_PromotionProductVendorID AND L.BIN_MerchandiseType = 'P'
            WHERE
                A.ValidFlag = '1'
                AND A.BIN_OrganizationInfoID = #organizationInfoId#
				AND A.BIN_BrandInfoID = #brandInfoId#
        ]]>
		<dynamic>
			<isNotEmpty prepend="AND" property="profitKbn">
				<isEqual property="profitKbn" compareValue="0">
                    <![CDATA[ISNULL(B.GainQuantity, 0) >= 0 ]]>
				</isEqual>
				<isEqual property="profitKbn" compareValue="1">
                    <![CDATA[ISNULL(B.GainQuantity, 0) < 0 ]]>
				</isEqual>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="stockTakingNo">
				A.StockTakingNoIF LIKE '%' + #stockTakingNo# + '%'
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="verifiedFlag">
				A.VerifiedFlag = #verifiedFlag#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="startDate">
            <![CDATA[
            A.StockTakingDate >= #startDate#
            ]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="endDate">
            <![CDATA[
            A.StockTakingDate <= #endDate#
            ]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="prmVendorId">
                <isEqual property="includeFlag" compareValue="1">
                	<![CDATA[
                		C.BIN_PromotionProductVendorID NOT IN 
                	]]>
                	<iterate conjunction = "," open="(" close=")" property="prmVendorId">
                		#prmVendorId[]#
                	</iterate>
                </isEqual>
                <isNotEqual property="includeFlag" compareValue="1">
                    <![CDATA[
                		C.BIN_PromotionProductVendorID IN 
                	]]>
                	<iterate conjunction = "," open="(" close=")" property="prmVendorId">
                		#prmVendorId[]#
                	</iterate>
                </isNotEqual>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="depotId">
	            <![CDATA[  
	                B.BIN_InventoryInfoID = #depotId#
	            ]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="PrimaryCategoryCode">
	            <![CDATA[  
	                K.PrimaryCategoryCode = #PrimaryCategoryCode#
	            ]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="SecondryCategoryCode">
	            <![CDATA[  
	                K.SecondryCategoryCode = #SecondryCategoryCode#
	            ]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="SmallCategoryCode">
	            <![CDATA[  
	                K.SmallCategoryCode = #SmallCategoryCode#
	            ]]>
			</isNotEmpty>
		</dynamic>
		<![CDATA[AND EXISTS ( ]]>
		<include refid="BINOLCMINC99.getDepartList" />
        <![CDATA[
                AND A.BIN_OrganizationID = A99.BIN_OrganizationID)
        ]]>
        <![CDATA[
            )CADETAIL1
            GROUP BY
                CADETAIL1.BIN_BrandInfoID,
                CADETAIL1.BIN_EmployeeID,
                CADETAIL1.BIN_OrganizationID,
                CADETAIL1.BIN_InventoryInfoID,
                CADETAIL1.BIN_PromotionStockTakingID,
                CADETAIL1.StockTakingNoIF,
                CADETAIL1.VerifiedFlag,
                CADETAIL1.Type,
                CADETAIL1.StockTakingDate,
                CADETAIL1.Reason,
                CADETAIL1.CreateTime
        ]]>
        <isEmpty property="codeMergeType">
            <![CDATA[,CADETAIL1.BIN_PromotionProductVendorID]]>
        </isEmpty>
        <isNotEmpty property="codeMergeType">
            <isEqual property="codeMergeType" compareValue="UnitCode">
                <![CDATA[,CADETAIL1.UnitCode]]>
            </isEqual>
            <isEqual property="codeMergeType" compareValue="BarCode">
               <![CDATA[,CADETAIL1.BarCode]]>
            </isEqual>
            <isEqual property="codeMergeType" compareValue="Custom">
               <![CDATA[,CADETAIL1.BIN_GroupID]]>
            </isEqual>
        </isNotEmpty>
        <![CDATA[
        )CADETAIL2
        GROUP BY
            CADETAIL2.BIN_BrandInfoID,
            CADETAIL2.BIN_EmployeeID,
            CADETAIL2.BIN_OrganizationID,
            CADETAIL2.BIN_InventoryInfoID,
            CADETAIL2.BIN_PromotionStockTakingID,
            CADETAIL2.StockTakingNoIF,
            CADETAIL2.VerifiedFlag,
            CADETAIL2.Type,
            CADETAIL2.StockTakingDate,
            CADETAIL2.Reason,
            CADETAIL2.CreateTime
        ]]>
	</sql>
	
	<!-- 盘点单查询sql文 -->
	<sql id="takingQuery">
    	 <![CDATA[
	    	SELECT
	    		'(' + T11.DepartCode + ')'+T11.DepartName AS departName, 
	    		T11.Type,
	    		T0.BIN_OrganizationID,         
				T0.BIN_BrandInfoID,
				T0.stockTakingId,
				T0.inventoryInfoId,
				K.RegionNameChinese AS region,
		  		M.RegionNameChinese AS city,
				T0.stockTakingNo,
				T0.realQuantity,
				T0.summQuantity,
				T0.summAmount,
				T0.takingType,                  
				T0.stockTakingDate,
				T0.Reason,
				T0.Quantity,
				T0.verifiedFlag,
				H.EmployeeName AS employeeName,
				T0.ShortQuantity,
				T0.OverQuantity
		]]>
		<dynamic>
			<isNotEmpty property="language">
				<isEqual property="language" compareValue="en_US">
					,'('+DepotCode+')'+D.DepotNameEN AS inventoryName
				</isEqual>
				<isEqual property="language" compareValue="zh_CN">
					,'('+DepotCode+')'+D.DepotNameCN AS inventoryName
				</isEqual>
			</isNotEmpty>
			<isEmpty property="language">
				,'('+DepotCode+')'+D.DepotNameCN AS inventoryName
			</isEmpty>
		</dynamic>
	    <![CDATA[
			FROM 
				Basis.BIN_Organization T11 WITH(NOLOCK)
				LEFT JOIN ( 
		]]>
		<include refid="BINOLSSPRM45.commTakingQuery" />   
		<![CDATA[)T0
				ON(T0.BIN_OrganizationID = T11.BIN_OrganizationID)
				LEFT JOIN Basis.BIN_Employee H WITH(NOLOCK)
				ON (T0.BIN_EmployeeID = H.BIN_EmployeeID )
				LEFT JOIN Basis.BIN_DepotInfo D WITH(NOLOCK)
				ON(T0.inventoryInfoId = D.BIN_DepotInfoID)
				LEFT JOIN Basis.BIN_Region K WITH(NOLOCK)
				ON(T11.BIN_RegionID = K.BIN_RegionID)
				LEFT JOIN Basis.BIN_Region M WITH(NOLOCK)
				ON(T11.BIN_CityID = M.BIN_RegionID)
		 	WHERE
				T11.Type <> 'Z'
				AND EXISTS ( 
		]]>
		<include refid="BINOLCMINC99.getDepartList" />     
        <![CDATA[ AND T11.BIN_OrganizationID = A99.BIN_OrganizationID)  ]]>
		<dynamic>
			<isNotEmpty prepend="AND" property="depotId">
	            <![CDATA[  
	                T0.inventoryInfoId = #depotId#
	            ]]>
			</isNotEmpty>
		</dynamic>
	</sql>

	<!-- 取得盘点单总数 -->
	<select id="getTakingCount" parameterClass="java.util.HashMap"
		resultClass="java.lang.Integer">
        <![CDATA[
            SELECT  COUNT(*) AS count FROM (
        ]]>
		<include refid="BINOLSSPRM45.takingQuery" />
        <![CDATA[
            )SORT_T1
        ]]>
	</select>
	<!-- 取得盘点单List -->
	<select id="getTakingList" parameterClass="java.util.HashMap"
		resultClass="java.util.HashMap">
		<include refid="BINOLCMINC99.pageheader" />
		<![CDATA[
			SELECT	
				T20.*
			FROM (
		]]>
		<include refid="BINOLSSPRM45.takingQuery" />
		<![CDATA[	
			)T20
		]]>
		<include refid="BINOLCMINC99.pagefooter" />
	</select>

	<!-- 取得盘点单汇总信息【产品作为检索条件】 -->
	<select id="getSumInfo" parameterClass="java.util.HashMap"
		resultClass="java.util.HashMap">
        <![CDATA[
            SELECT
                ISNULL(SUM(ISNULL(T0.summQuantity, 0)),0) AS sumQuantity,
                ISNULL(SUM(ISNULL(T0.summAmount, 0)),0) AS sumAmount,
				ISNULL(SUM(ISNULL(T0.realQuantity,0)),0) AS sumrealQuantity
            FROM(]]>
		<include refid="BINOLSSPRM45.commTakingQuery" />
			<![CDATA[)T0]]>
	</select>

	<!-- 取得盘点信息(Excel导出) -->
	<select id="getTakingInfoListExcel" parameterClass="java.util.HashMap"
		resultClass="java.util.HashMap">
     <![CDATA[
    	SELECT
			T11.DepartCode,
			T11.DepartName AS departName,
			T11.Type,
   			T0.BIN_OrganizationID,  
   			K.RegionNameChinese AS region,
   			M.RegionNameChinese AS city,
   			H.EmployeeCode,
   			T.CounterNameIF,
   			CONVERT(varchar(100),T0.CreateTime, 22) AS CreateTime ,       
			T0.BIN_BrandInfoID,
			T0.stockTakingId,
			T0.stockTakingNo,
			T0.inventoryInfoId,
			T0.realQuantity,
			T0.summQuantity,
			T0.summAmount,
			T0.takingType,                  
			T0.stockTakingDate,
			T0.Reason,
			T0.Quantity,
			T0.verifiedFlag,
			H.EmployeeName AS employeeName,
			T0.ShortQuantity,
			T0.OverQuantity
		]]>
		<dynamic>
			<isNotEmpty property="language">
				<isEqual property="language" compareValue="en_US">
					,'('+DepotCode+')'+D.DepotNameEN AS inventoryName
				</isEqual>
				<isEqual property="language" compareValue="zh_CN">
					,'('+DepotCode+')'+D.DepotNameCN AS inventoryName
				</isEqual>
			</isNotEmpty>
			<isEmpty property="language">
				,'('+DepotCode+')'+D.DepotNameCN AS inventoryName
			</isEmpty>
		</dynamic>
        <![CDATA[
        	FROM 
        		Basis.BIN_Organization T11
				LEFT JOIN  ( 
		]]>
		<include refid="BINOLSSPRM45.commTakingQuery" />   
			<![CDATA[)T0
				ON(T0.BIN_OrganizationID = T11.BIN_OrganizationID)
				LEFT JOIN Basis.BIN_Employee H WITH(NOLOCK)
				ON (T0.BIN_EmployeeID = H.BIN_EmployeeID )
				LEFT JOIN Basis.BIN_DepotInfo D WITH(NOLOCK)
				ON(T0.inventoryInfoId = D.BIN_DepotInfoID)
				LEFT JOIN Basis.BIN_Region K WITH(NOLOCK)
				ON T11.BIN_RegionID = K.BIN_RegionID
				LEFT JOIN Basis.BIN_Region M WITH(NOLOCK)
				ON T11.BIN_CityID = M.BIN_RegionID
				LEFT JOIN Basis.BIN_CounterInfo T WITH(NOLOCK)
				ON T11.BIN_OrganizationID = T.BIN_OrganizationID
			WHERE
			 	T11.Type <> 'Z'
				AND EXISTS ( ]]>
		<include refid="BINOLCMINC99.getDepartList" />     
        <![CDATA[ AND T11.BIN_OrganizationID = A99.BIN_OrganizationID)  ]]>
        <dynamic>
			<isNotEmpty prepend="AND" property="depotId">
	            <![CDATA[  
	                T0.inventoryInfoId = #depotId#
	            ]]>
			</isNotEmpty>
		</dynamic>
	</select>
	
	<!-- 查询相关的促销品 -->
	<select id="getConjunctionPrmList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		<![CDATA[
			SELECT 
				A.BIN_ProductVendorID
			FROM 
				Basis.BIN_Conjunction A
			WHERE 
				A.BIN_BrandInfoID = #brandInfoId#
			AND A.BIN_OrganizationInfoID = #organizationInfoId#
			AND A.BIN_MerchandiseType = #BIN_MerchandiseType#
			AND A.BIN_GroupID IN (
					SELECT 
						B.BIN_GroupID
					FROM Basis.BIN_Conjunction B
					WHERE 
						B.BIN_BrandInfoID = #brandInfoId#
					AND B.BIN_OrganizationInfoID = #organizationInfoId#
					AND B.BIN_MerchandiseType = #BIN_MerchandiseType#
					AND B.BIN_ProductVendorID IN 
		]]>
		<iterate conjunction="," open="(" close=")" property="prmVendorIdList">
			#prmVendorIdList[]#
		</iterate>
		<![CDATA[
			)
		]]>
	</select>
</sqlMap>
