<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.1.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
	http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
    http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
    http://www.springframework.org/schema/data/mongo
    http://www.springframework.org/schema/data/mongo/spring-mongo-1.1.xsd"
    
    default-autowire="byName">

	<!-- spring 注入注解支持 -->
	<context:annotation-config />
	
	<!-- 支持JavaConfig的配置，用以实现XML配置和JavaConfig的混合配置START 
	<bean class="com.cherry.cm.mongo.config.CherrySpringMongoConfig"/>
	-->
    <!-- 一定要加上 JavaConfig bean post-processor
    <bean class="org.springframework.config.java.process.ConfigurationPostProcessor"/>
     -->
    <!--
    <bean id="exceptionTranslator"
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
    -->
    <!-- 定义repository -->
    <!-- 改用注解方式
     <mongo:repositories base-package="com.cherry.cm.mongo.repositories" />
      -->
    <!-- 支持JavaConfig的配置，用以实现XML配置和JavaConfig的混合配置END -->
	
	
	<!-- 对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
	<context:component-scan base-package="com" />
	
	<!-- spring aop支持 -->
	<aop:aspectj-autoproxy proxy-target-class="false"/>
	<!-- aop:aspectj-autoproxy proxy-target-class="true"/-->
		<!--  ====================================AOP 配置Start=========================== -->
	<bean id="sqlInject" class="com.cherry.cm.aop.SqlInjectAop"/>
	<aop:config>
           <aop:pointcut id="manPointcut"
                     expression="execution(* com.cherry.*.*.service.*.*(..))" />
              <aop:aspect id="beforeExample" ref="sqlInject">
                     <aop:before pointcut-ref="manPointcut" method="before" />
              </aop:aspect>
      </aop:config>

		
	<!-- 事务管理配置  开始-->
	  <tx:advice id="txAdvice" transaction-manager="txManager">
		  <tx:attributes>
		    <!-- 当抛出Exception时事务回滚 -->
		    <tx:method name="*" rollback-for="Exception"/>
		  </tx:attributes>
	  </tx:advice>
	  
	  <!-- 模块包下的bl带tran开头的方法都会回滚事务 -->
	  <aop:config>
		  <aop:pointcut id="tranOperation" expression="execution(* com.cherry.*.*.bl.*.tran*(..))"/>																			
		  <aop:advisor advice-ref="txAdvice" pointcut-ref="tranOperation"/>
	  </aop:config>
	
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  		<property name="dataSource" ref="dataSource"/>
  	</bean>
  	<bean id="txManager-config" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  	<property name="dataSource" ref="dataSourceCherryConfig"/>
	</bean>
	<!-- 事务管理配置  结束-->

	
	<!--  ====================================ibatis 配置Start=========================== -->

	<!--配置一个数据源,根据上面 propertyConfig指定的location去找数据库连接的配置信息-->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
       <property name="locations">  
           <list>  
               <value>classpath:conf/properties/proxool-jdbc.properties</value>  
           </list>  
       </property>  
   </bean> 
   
   	<!-- 新后台品牌数据库动态数据源-->
	<bean id="dataSource" class="com.cherry.cm.core.CustomerRoutingDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="LOGIN" value-ref="dataSourceCherryConfig" />
				<entry key="CherryBrandDB" value-ref="dataSourceCherryBrand" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSourceCherryConfig" />
	</bean> 

	<!--根据 dataSource和configLocation创建一个SqlMapClient-->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocations">
			 <list>
				<value>classpath:conf/ibatis-conf/sql-map-config.xml</value>
				<!-- OSworkflow配置  -->  
	            <value>classpath:com/opensymphony/workflow/spi/ibatis/OSIbatisConfig.xml</value>
	            <value>classpath:conf/ibatis-conf/sql-map-config-test.xml</value>        
			</list>  
		</property>
	</bean>

	<!--  ====================================ibatis 配置 End=========================== -->
	
	<!--  ====================================ActiveMQ 配置 =========================== -->
	<!-- 配置JMS连接工厂 -->    										
    <bean id="JmsConnectionFactory" class="com.cherry.cm.core.DecryptionMQConnectionFactory">    											
        <property name="brokerURL" value="1ef6680810b111f8adf30e8fd5ec190de2eff8e2048808a84e2ac70443726295"/>
        <property name="userName" value="86a761159e6d0e3e"/>
        <property name="password" value="be0e743f27265ed1307b157310210a84"/>											
    </bean> 
	<!-- Spring JMS Template -->
			
	<bean id="JmsTemplate" class="org.springframework.jms.core.JmsTemplate">		
		<property name="connectionFactory">	
			<!-- 发送消息的时候启用连接池-->
			<bean class="org.springframework.jms.connection.SingleConnectionFactory">
				<property name="targetConnectionFactory" ref="JmsConnectionFactory" />			
			</bean>
		</property>	
		<property name="defaultDestination" ref="cherryToPosMsgQueue"/>	
	</bean>
	   		
	<!-- 发送消息的目的地（队列,新后台 ->witpos） -->    	
    <bean id="cherryToPosMsgQueue" class="org.apache.activemq.command.ActiveMQQueue">    	
        <!-- 设置消息队列的名字 -->    	
        <constructor-arg index="0" value="cherryToPosMsgQueue"/>    	
    </bean>
    
    <!-- 发送消息的目的地（队列,witpos ->新后台） -->
    <bean id="posToCherryMsgQueue" class="org.apache.activemq.command.ActiveMQQueue">    	
        <!-- 设置消息队列的名字 -->    	
        <constructor-arg index="0" value="posToCherryMsgQueue"/>    	
    </bean> 
    
    <!-- 发送消息的目的地（实时推送的消息） -->
    <bean id="cherry4PubMsgQueue" class="org.apache.activemq.command.ActiveMQQueue">    	
        <!-- 设置消息队列的名字 -->    	
        <constructor-arg index="0" value="cherry4PubMsgQueue"/>    	
    </bean>
	
	<!-- 发送消息的目的地（规则处理） -->
    <bean id="cherryRuleMsgQueue" class="org.apache.activemq.command.ActiveMQQueue">    	
        <!-- 设置消息队列的名字 -->    	
        <constructor-arg index="0" value="cherryRuleMsgQueue"/>    	
    </bean>   	
    	
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">     
    	<property name="connectionFactory" ref="JmsConnectionFactory"/>   
    	<property name="defaultDestination" ref="cherryToPosMsgQueue"></property> 
   	</bean> 
   	<!-- 正式发布的时候或者DEBUG消息监听的时候请把下面所有监听器注释打开-->
   	<!-- 业务消息的MQ监听 
   	<bean id="listenerContainer"												
        class="org.springframework.jms.listener.DefaultMessageListenerContainer">												
        <property name="concurrentConsumers"												
            value="1" />												
        <property name="connectionFactory"												
            ref="JmsConnectionFactory" />												
        <property name="destination"												
            ref="posToCherryMsgQueue" />												
        <property name="messageListener"												
            ref="messageListener" />												
    </bean>		-->										
    <!-- 业务消息的MQ监听器  																
	<bean id="messageListener"											
        class="org.springframework.jms.listener.adapter.MessageListenerAdapter">												
        <constructor-arg>												
            <bean class="com.cherry.mq.mes.common.CherryMessageReceiverImpl" />												
        </constructor-arg>												
        <property name="defaultListenerMethod"												
            value="handleMessage" />												
    </bean>	--> 	
    
    <!-- 实时推送消息的MQ监听  
    <bean id="cherry4PubMsglistenerContainer"												
        class="org.springframework.jms.listener.DefaultMessageListenerContainer">												
        <property name="concurrentConsumers"												
            value="1" />												
        <property name="connectionFactory"												
            ref="JmsConnectionFactory" />												
        <property name="destination"												
            ref="cherry4PubMsgQueue" />												
        <property name="messageListener"												
            ref="cherry4PubMsgListener" />												
    </bean>			-->									
    <!-- 实时推送消息的MQ监听器															
	<bean id="cherry4PubMsgListener"											
        class="org.springframework.jms.listener.adapter.MessageListenerAdapter">												
        <constructor-arg>												
            <bean class="com.cherry.mq.mes.atmosphere.JQueryPubSubListener" />												
        </constructor-arg>												
        <property name="defaultListenerMethod"												
            value="handle4PubMessage" />												
    </bean>	 -->	
	 
	 <!-- 规则处理消息的MQ监听  
    <bean id="cherryRuleMsglistenerContainer"												
        class="org.springframework.jms.listener.DefaultMessageListenerContainer">												
        <property name="concurrentConsumers"												
            value="1" />												
        <property name="connectionFactory"												
            ref="JmsConnectionFactory" />												
        <property name="destination"												
            ref="cherryRuleMsgQueue" />												
        <property name="messageListener"												
            ref="cherryRuleMsgListener" />												
    </bean>		-->										
    <!-- 规则处理消息的MQ监听器  																
	<bean id="cherryRuleMsgListener"											
        class="org.springframework.jms.listener.adapter.MessageListenerAdapter">												
        <constructor-arg>												
            <bean class="com.cherry.mq.mes.common.CherryRuleMsgReceiverImpl" />												
        </constructor-arg>												
        <property name="defaultListenerMethod"												
            value="handleMessage" />												
    </bean>	-->	
	 	<!-- OSworkflow配置  -->
	<!-- 
	<bean id="sqlMapClientOS" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation">
			<value>classpath:/com/opensymphony/workflow/spi/ibatis/OSIbatisConfig.xml</value>
		</property>
		<property name="dataSource">
			<ref bean="dataSource"/>
		</property>
	</bean>
	 -->
	<bean id="innerJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
  		<property name="dataSource">
            <ref bean="dataSource"/>
  		</property>
 	</bean>
	
	<bean id="binolcm30IF" class="com.cherry.cm.core.CherryFileStore"></bean>
	
    <bean id="workflowFactory" class="com.opensymphony.workflow.loader.CherryWorkflowFactory" init-method="initDone"> 
         <property name="cherryFileStore"> 
             <ref bean="binolcm30IF"/>
         </property> 
         <property name="reload"> 
           <value>true</value> 
         </property> 
    </bean> 
	
	<bean id="ibatisworkflowStore" class="com.opensymphony.workflow.spi.ibatis.IBatisWorkflowStore">
		<property name="sqlMapClient">
			<ref bean="sqlMapClient"/>
		</property>	
		<property name="innerJdbcTemplate">
			<ref bean="innerJdbcTemplate"/>
		</property>	
	
	</bean>
    <bean id="osworkflowConfiguration" class="com.opensymphony.workflow.config.SpringConfiguration">
        <property name="store">
            <ref local="ibatisworkflowStore"/>
        </property>
        <property name="factory">
            <ref local="workflowFactory"/>
        </property>
    </bean>
    <bean id="workflowTypeResolver" class="com.opensymphony.workflow.util.SpringTypeResolver">
  	  <!--
    	Here you can inject custom resolver for business logic
		<property name="conditions">
    	  <map>
	    	  <entry key="beanshell">
      		  <value>mypackage.MyBeanShellCustomCondition</value></entry>
	  	  </map>
		</property>
	   -->
	</bean>
  
    <bean id="workflow"  class="com.opensymphony.workflow.basic.BasicWorkflow" 
      	  scope="prototype"> 
		 <constructor-arg>
		 	<value>test</value>
		 	</constructor-arg>
    	<property name="configuration"> 
     		 <ref local="osworkflowConfiguration"/> 
    	</property> 
   		<property name="resolver">
     		 <ref local="workflowTypeResolver"/>
    	 </property>	
  	</bean>
  	
  	<!-- 动态数据源定义文件 -->
	<import resource="classpath:conf/spring-conf/beans-define/beans-*.xml"/>
	<import resource="classpath:conf/spring-conf-test/beans-define/beans-*.xml"/>
   
</beans>
